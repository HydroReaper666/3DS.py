*** interpreter/Python-3.6.9/Modules/posixmodule.c	2019-07-02 22:25:39.000000000 +0200
--- python_patches/posixmodule.c	2019-07-25 21:37:07.230965215 +0200
***************
*** 8,17 ****
     of the compiler used.  Different compilers define their own feature
     test macro, e.g. '_MSC_VER'. */
  
- 
- 
  #ifdef __APPLE__
!    /*
      * Step 1 of support for weak-linking a number of symbols existing on
      * OSX 10.4 and later, see the comment in the #ifdef __APPLE__ block
      * at the end of this file for more information.
--- 8,15 ----
     of the compiler used.  Different compilers define their own feature
     test macro, e.g. '_MSC_VER'. */
  
  #ifdef __APPLE__
! /*
      * Step 1 of support for weak-linking a number of symbols existing on
      * OSX 10.4 and later, see the comment in the #ifdef __APPLE__ block
      * at the end of this file for more information.
***************
*** 178,199 ****
  #define fsync _commit
  #else
  /* Unix functions that the configure script doesn't check for */
! #define HAVE_EXECV      1
! #define HAVE_FORK       1
  #if defined(__USLC__) && defined(__SCO_VERSION__)       /* SCO UDK Compiler */
  #define HAVE_FORK1      1
  #endif
! #define HAVE_GETEGID    1
! #define HAVE_GETEUID    1
! #define HAVE_GETGID     1
! #define HAVE_GETPPID    1
! #define HAVE_GETUID     1
! #define HAVE_KILL       1
  #define HAVE_OPENDIR    1
! #define HAVE_PIPE       1
! #define HAVE_SYSTEM     1
  #define HAVE_WAIT       1
! #define HAVE_TTYNAME    1
  #endif  /* _MSC_VER */
  #endif  /* ! __WATCOMC__ || __QNX__ */
  
--- 176,197 ----
  #define fsync _commit
  #else
  /* Unix functions that the configure script doesn't check for */
! #undef HAVE_EXECV
! #undef HAVE_FORK
  #if defined(__USLC__) && defined(__SCO_VERSION__)       /* SCO UDK Compiler */
  #define HAVE_FORK1      1
  #endif
! #undef HAVE_GETEGID
! #undef HAVE_GETEUID
! #undef HAVE_GETGID
! #undef HAVE_GETPPID
! #undef HAVE_GETUID
! #undef HAVE_KILL
  #define HAVE_OPENDIR    1
! #undef HAVE_PIPE
! #undef HAVE_SYSTEM
  #define HAVE_WAIT       1
! #undef HAVE_TTYNAME
  #endif  /* _MSC_VER */
  #endif  /* ! __WATCOMC__ || __QNX__ */
  
***************
*** 318,324 ****
  #include <shellapi.h>   /* for ShellExecute() */
  #include <lmcons.h>     /* for UNLEN */
  #ifdef SE_CREATE_SYMBOLIC_LINK_NAME /* Available starting with Vista */
! #define HAVE_SYMLINK
  static int win32_can_symlink = 0;
  #endif
  #endif /* _MSC_VER */
--- 316,322 ----
  #include <shellapi.h>   /* for ShellExecute() */
  #include <lmcons.h>     /* for UNLEN */
  #ifdef SE_CREATE_SYMBOLIC_LINK_NAME /* Available starting with Vista */
! #undef HAVE_SYMLINK
  static int win32_can_symlink = 0;
  #endif
  #endif /* _MSC_VER */
***************
*** 519,540 ****
          goto overflow;
      /* fallthrough */
  
! success:
      Py_DECREF(index);
      *(uid_t *)p = uid;
      return 1;
  
! underflow:
      PyErr_SetString(PyExc_OverflowError,
                      "uid is less than minimum");
      goto fail;
  
! overflow:
      PyErr_SetString(PyExc_OverflowError,
                      "uid is greater than maximum");
      /* fallthrough */
  
! fail:
      Py_DECREF(index);
      return 0;
  }
--- 517,538 ----
          goto overflow;
      /* fallthrough */
  
!     success:
      Py_DECREF(index);
      *(uid_t *)p = uid;
      return 1;
  
!     underflow:
      PyErr_SetString(PyExc_OverflowError,
                      "uid is less than minimum");
      goto fail;
  
!     overflow:
      PyErr_SetString(PyExc_OverflowError,
                      "uid is greater than maximum");
      /* fallthrough */
  
!     fail:
      Py_DECREF(index);
      return 0;
  }
***************
*** 626,647 ****
          goto overflow;
      /* fallthrough */
  
! success:
      Py_DECREF(index);
      *(gid_t *)p = gid;
      return 1;
  
! underflow:
      PyErr_SetString(PyExc_OverflowError,
                      "gid is less than minimum");
      goto fail;
  
! overflow:
      PyErr_SetString(PyExc_OverflowError,
                      "gid is greater than maximum");
      /* fallthrough */
  
! fail:
      Py_DECREF(index);
      return 0;
  }
--- 624,645 ----
          goto overflow;
      /* fallthrough */
  
!     success:
      Py_DECREF(index);
      *(gid_t *)p = gid;
      return 1;
  
!     underflow:
      PyErr_SetString(PyExc_OverflowError,
                      "gid is less than minimum");
      goto fail;
  
!     overflow:
      PyErr_SetString(PyExc_OverflowError,
                      "gid is greater than maximum");
      /* fallthrough */
  
!     fail:
      Py_DECREF(index);
      return 0;
  }
***************
*** 951,966 ****
          /* XXX Replace PyObject_CheckBuffer with PyBytes_Check in other code
             after removing suport of non-bytes buffer objects. */
          if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
!             "%s%s%s should be %s, not %.200s",
!             path->function_name ? path->function_name : "",
!             path->function_name ? ": "                : "",
!             path->argument_name ? path->argument_name : "path",
!             path->allow_fd && path->nullable ? "string, bytes, os.PathLike, "
!                                                "integer or None" :
!             path->allow_fd ? "string, bytes, os.PathLike or integer" :
!             path->nullable ? "string, bytes, os.PathLike or None" :
                               "string, bytes or os.PathLike",
!             Py_TYPE(o)->tp_name)) {
              goto error_exit;
          }
          bytes = PyBytes_FromObject(o);
--- 949,964 ----
          /* XXX Replace PyObject_CheckBuffer with PyBytes_Check in other code
             after removing suport of non-bytes buffer objects. */
          if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
!                              "%s%s%s should be %s, not %.200s",
!                              path->function_name ? path->function_name : "",
!                              path->function_name ? ": "                : "",
!                              path->argument_name ? path->argument_name : "path",
!                              path->allow_fd && path->nullable ? "string, bytes, os.PathLike, "
!                                                                 "integer or None" :
!                              path->allow_fd ? "string, bytes, os.PathLike or integer" :
!                              path->nullable ? "string, bytes, os.PathLike or None" :
                               "string, bytes or os.PathLike",
!                              Py_TYPE(o)->tp_name)) {
              goto error_exit;
          }
          bytes = PyBytes_FromObject(o);
***************
*** 981,997 ****
          goto success_exit;
      }
      else {
!  error_format:
          PyErr_Format(PyExc_TypeError, "%s%s%s should be %s, not %.200s",
!             path->function_name ? path->function_name : "",
!             path->function_name ? ": "                : "",
!             path->argument_name ? path->argument_name : "path",
!             path->allow_fd && path->nullable ? "string, bytes, os.PathLike, "
!                                                "integer or None" :
!             path->allow_fd ? "string, bytes, os.PathLike or integer" :
!             path->nullable ? "string, bytes, os.PathLike or None" :
!                              "string, bytes or os.PathLike",
!             Py_TYPE(o)->tp_name);
          goto error_exit;
      }
  
--- 979,995 ----
          goto success_exit;
      }
      else {
!         error_format:
          PyErr_Format(PyExc_TypeError, "%s%s%s should be %s, not %.200s",
!                      path->function_name ? path->function_name : "",
!                      path->function_name ? ": "                : "",
!                      path->argument_name ? path->argument_name : "path",
!                      path->allow_fd && path->nullable ? "string, bytes, os.PathLike, "
!                                                         "integer or None" :
!                      path->allow_fd ? "string, bytes, os.PathLike or integer" :
!                      path->nullable ? "string, bytes, os.PathLike or None" :
!                      "string, bytes or os.PathLike",
!                      Py_TYPE(o)->tp_name);
          goto error_exit;
      }
  
***************
*** 1041,1052 ****
  #endif
      path->fd = -1;
  
!  success_exit:
      path->length = length;
      path->object = o;
      return Py_CLEANUP_SUPPORTED;
  
!  error_exit:
      Py_XDECREF(o);
      Py_XDECREF(bytes);
  #ifdef MS_WINDOWS
--- 1039,1050 ----
  #endif
      path->fd = -1;
  
!     success_exit:
      path->length = length;
      path->object = o;
      return Py_CLEANUP_SUPPORTED;
  
!     error_exit:
      Py_XDECREF(o);
      Py_XDECREF(bytes);
  #ifdef MS_WINDOWS
***************
*** 1059,1068 ****
  argument_unavailable_error(const char *function_name, const char *argument_name)
  {
      PyErr_Format(PyExc_NotImplementedError,
!         "%s%s%s unavailable on this platform",
!         (function_name != NULL) ? function_name : "",
!         (function_name != NULL) ? ": ": "",
!         argument_name);
  }
  
  static int
--- 1057,1066 ----
  argument_unavailable_error(const char *function_name, const char *argument_name)
  {
      PyErr_Format(PyExc_NotImplementedError,
!                  "%s%s%s unavailable on this platform",
!                  (function_name != NULL) ? function_name : "",
!                  (function_name != NULL) ? ": ": "",
!                  argument_name);
  }
  
  static int
***************
*** 1103,1112 ****
  path_and_dir_fd_invalid(const char *function_name, path_t *path, int dir_fd)
  {
      if (!path->wide && (dir_fd != DEFAULT_DIR_FD)
! #ifndef MS_WINDOWS
          && !path->narrow
  #endif
!     ) {
          PyErr_Format(PyExc_ValueError,
                       "%s: can't specify dir_fd without matching path",
                       function_name);
--- 1101,1110 ----
  path_and_dir_fd_invalid(const char *function_name, path_t *path, int dir_fd)
  {
      if (!path->wide && (dir_fd != DEFAULT_DIR_FD)
!         #ifndef MS_WINDOWS
          && !path->narrow
  #endif
!             ) {
          PyErr_Format(PyExc_ValueError,
                       "%s: can't specify dir_fd without matching path",
                       function_name);
***************
*** 1154,1162 ****
  }
  
  #ifdef MS_WINDOWS
!     typedef long long Py_off_t;
  #else
!     typedef off_t Py_off_t;
  #endif
  
  static int
--- 1152,1160 ----
  }
  
  #ifdef MS_WINDOWS
! typedef long long Py_off_t;
  #else
! typedef off_t Py_off_t;
  #endif
  
  static int
***************
*** 1409,1418 ****
  
      do {
          Py_BEGIN_ALLOW_THREADS
!         _Py_BEGIN_SUPPRESS_IPH
          res = (*func)(fd);
          _Py_END_SUPPRESS_IPH
!         Py_END_ALLOW_THREADS
      } while (res != 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
      if (res != 0)
          return (!async_err) ? posix_error() : NULL;
--- 1407,1416 ----
  
      do {
          Py_BEGIN_ALLOW_THREADS
!                 _Py_BEGIN_SUPPRESS_IPH
          res = (*func)(fd);
          _Py_END_SUPPRESS_IPH
!                 Py_END_ALLOW_THREADS
      } while (res != 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
      if (res != 0)
          return (!async_err) ? posix_error() : NULL;
***************
*** 1680,1724 ****
  See os.stat for more information.");
  
  static PyStructSequence_Field stat_result_fields[] = {
!     {"st_mode",    "protection bits"},
!     {"st_ino",     "inode"},
!     {"st_dev",     "device"},
!     {"st_nlink",   "number of hard links"},
!     {"st_uid",     "user ID of owner"},
!     {"st_gid",     "group ID of owner"},
!     {"st_size",    "total size, in bytes"},
!     /* The NULL is replaced with PyStructSequence_UnnamedField later. */
!     {NULL,   "integer time of last access"},
!     {NULL,   "integer time of last modification"},
!     {NULL,   "integer time of last change"},
!     {"st_atime",   "time of last access"},
!     {"st_mtime",   "time of last modification"},
!     {"st_ctime",   "time of last change"},
!     {"st_atime_ns",   "time of last access in nanoseconds"},
!     {"st_mtime_ns",   "time of last modification in nanoseconds"},
!     {"st_ctime_ns",   "time of last change in nanoseconds"},
  #ifdef HAVE_STRUCT_STAT_ST_BLKSIZE
!     {"st_blksize", "blocksize for filesystem I/O"},
  #endif
  #ifdef HAVE_STRUCT_STAT_ST_BLOCKS
!     {"st_blocks",  "number of blocks allocated"},
  #endif
  #ifdef HAVE_STRUCT_STAT_ST_RDEV
!     {"st_rdev",    "device type (if inode device)"},
  #endif
  #ifdef HAVE_STRUCT_STAT_ST_FLAGS
!     {"st_flags",   "user defined flags for file"},
  #endif
  #ifdef HAVE_STRUCT_STAT_ST_GEN
!     {"st_gen",    "generation number"},
  #endif
  #ifdef HAVE_STRUCT_STAT_ST_BIRTHTIME
!     {"st_birthtime",   "time of creation"},
  #endif
  #ifdef HAVE_STRUCT_STAT_ST_FILE_ATTRIBUTES
!     {"st_file_attributes", "Windows file attribute bits"},
  #endif
!     {0}
  };
  
  #ifdef HAVE_STRUCT_STAT_ST_BLKSIZE
--- 1678,1722 ----
  See os.stat for more information.");
  
  static PyStructSequence_Field stat_result_fields[] = {
!         {"st_mode",    "protection bits"},
!         {"st_ino",     "inode"},
!         {"st_dev",     "device"},
!         {"st_nlink",   "number of hard links"},
!         {"st_uid",     "user ID of owner"},
!         {"st_gid",     "group ID of owner"},
!         {"st_size",    "total size, in bytes"},
!         /* The NULL is replaced with PyStructSequence_UnnamedField later. */
!         {NULL,   "integer time of last access"},
!         {NULL,   "integer time of last modification"},
!         {NULL,   "integer time of last change"},
!         {"st_atime",   "time of last access"},
!         {"st_mtime",   "time of last modification"},
!         {"st_ctime",   "time of last change"},
!         {"st_atime_ns",   "time of last access in nanoseconds"},
!         {"st_mtime_ns",   "time of last modification in nanoseconds"},
!         {"st_ctime_ns",   "time of last change in nanoseconds"},
  #ifdef HAVE_STRUCT_STAT_ST_BLKSIZE
!         {"st_blksize", "blocksize for filesystem I/O"},
  #endif
  #ifdef HAVE_STRUCT_STAT_ST_BLOCKS
!         {"st_blocks",  "number of blocks allocated"},
  #endif
  #ifdef HAVE_STRUCT_STAT_ST_RDEV
!         {"st_rdev",    "device type (if inode device)"},
  #endif
  #ifdef HAVE_STRUCT_STAT_ST_FLAGS
!         {"st_flags",   "user defined flags for file"},
  #endif
  #ifdef HAVE_STRUCT_STAT_ST_GEN
!         {"st_gen",    "generation number"},
  #endif
  #ifdef HAVE_STRUCT_STAT_ST_BIRTHTIME
!         {"st_birthtime",   "time of creation"},
  #endif
  #ifdef HAVE_STRUCT_STAT_ST_FILE_ATTRIBUTES
!         {"st_file_attributes", "Windows file attribute bits"},
  #endif
!         {0}
  };
  
  #ifdef HAVE_STRUCT_STAT_ST_BLKSIZE
***************
*** 1764,1773 ****
  #endif
  
  static PyStructSequence_Desc stat_result_desc = {
!     "stat_result", /* name */
!     stat_result__doc__, /* doc */
!     stat_result_fields,
!     10
  };
  
  PyDoc_STRVAR(statvfs_result__doc__,
--- 1762,1771 ----
  #endif
  
  static PyStructSequence_Desc stat_result_desc = {
!         "stat_result", /* name */
!         stat_result__doc__, /* doc */
!         stat_result_fields,
!         10
  };
  
  PyDoc_STRVAR(statvfs_result__doc__,
***************
*** 1779,1802 ****
  See os.statvfs for more information.");
  
  static PyStructSequence_Field statvfs_result_fields[] = {
!     {"f_bsize",  },
!     {"f_frsize", },
!     {"f_blocks", },
!     {"f_bfree",  },
!     {"f_bavail", },
!     {"f_files",  },
!     {"f_ffree",  },
!     {"f_favail", },
!     {"f_flag",   },
!     {"f_namemax",},
!     {0}
  };
  
  static PyStructSequence_Desc statvfs_result_desc = {
!     "statvfs_result", /* name */
!     statvfs_result__doc__, /* doc */
!     statvfs_result_fields,
!     10
  };
  
  #if defined(HAVE_WAITID) && !defined(__APPLE__)
--- 1777,1800 ----
  See os.statvfs for more information.");
  
  static PyStructSequence_Field statvfs_result_fields[] = {
!         {"f_bsize",  },
!         {"f_frsize", },
!         {"f_blocks", },
!         {"f_bfree",  },
!         {"f_bavail", },
!         {"f_files",  },
!         {"f_ffree",  },
!         {"f_favail", },
!         {"f_flag",   },
!         {"f_namemax",},
!         {0}
  };
  
  static PyStructSequence_Desc statvfs_result_desc = {
!         "statvfs_result", /* name */
!         statvfs_result__doc__, /* doc */
!         statvfs_result_fields,
!         10
  };
  
  #if defined(HAVE_WAITID) && !defined(__APPLE__)
***************
*** 1926,1932 ****
      s = NULL;
      float_s = NULL;
      ns_total = NULL;
! exit:
      Py_XDECREF(s);
      Py_XDECREF(ns_fractional);
      Py_XDECREF(s_in_ns);
--- 1924,1930 ----
      s = NULL;
      float_s = NULL;
      ns_total = NULL;
!     exit:
      Py_XDECREF(s);
      Py_XDECREF(ns_fractional);
      Py_XDECREF(s_in_ns);
***************
*** 2058,2076 ****
      if (path->fd != -1)
          result = FSTAT(path->fd, &st);
  #ifdef MS_WINDOWS
!     else if (follow_symlinks)
          result = win32_stat(path->wide, &st);
      else
          result = win32_lstat(path->wide, &st);
  #else
      else
  #if defined(HAVE_LSTAT)
!     if ((!follow_symlinks) && (dir_fd == DEFAULT_DIR_FD))
          result = LSTAT(path->narrow, &st);
      else
  #endif /* HAVE_LSTAT */
  #ifdef HAVE_FSTATAT
!     if ((dir_fd != DEFAULT_DIR_FD) || !follow_symlinks)
          result = fstatat(dir_fd, path->narrow, &st,
                           follow_symlinks ? 0 : AT_SYMLINK_NOFOLLOW);
      else
--- 2056,2074 ----
      if (path->fd != -1)
          result = FSTAT(path->fd, &st);
  #ifdef MS_WINDOWS
!         else if (follow_symlinks)
          result = win32_stat(path->wide, &st);
      else
          result = win32_lstat(path->wide, &st);
  #else
      else
  #if defined(HAVE_LSTAT)
!         if ((!follow_symlinks) && (dir_fd == DEFAULT_DIR_FD))
          result = LSTAT(path->narrow, &st);
      else
  #endif /* HAVE_LSTAT */
  #ifdef HAVE_FSTATAT
!         if ((dir_fd != DEFAULT_DIR_FD) || !follow_symlinks)
          result = fstatat(dir_fd, path->narrow, &st,
                           follow_symlinks ? 0 : AT_SYMLINK_NOFOLLOW);
      else
***************
*** 2137,2264 ****
  [python start generated code]*/
  
  #ifdef HAVE_FACCESSAT
!     #define FACCESSAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define FACCESSAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_FCHMODAT
!     #define FCHMODAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define FCHMODAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_FCHOWNAT
!     #define FCHOWNAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define FCHOWNAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_FSTATAT
!     #define FSTATAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define FSTATAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_LINKAT
!     #define LINKAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define LINKAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_MKDIRAT
!     #define MKDIRAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define MKDIRAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_MKFIFOAT
!     #define MKFIFOAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define MKFIFOAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_MKNODAT
!     #define MKNODAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define MKNODAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_OPENAT
!     #define OPENAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define OPENAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_READLINKAT
!     #define READLINKAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define READLINKAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_SYMLINKAT
!     #define SYMLINKAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define SYMLINKAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_UNLINKAT
!     #define UNLINKAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define UNLINKAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_FCHDIR
!     #define PATH_HAVE_FCHDIR 1
  #else
!     #define PATH_HAVE_FCHDIR 0
  #endif
  
  #ifdef HAVE_FCHMOD
!     #define PATH_HAVE_FCHMOD 1
  #else
!     #define PATH_HAVE_FCHMOD 0
  #endif
  
  #ifdef HAVE_FCHOWN
!     #define PATH_HAVE_FCHOWN 1
  #else
!     #define PATH_HAVE_FCHOWN 0
  #endif
  
  #ifdef HAVE_FDOPENDIR
!     #define PATH_HAVE_FDOPENDIR 1
  #else
!     #define PATH_HAVE_FDOPENDIR 0
  #endif
  
  #ifdef HAVE_FEXECVE
!     #define PATH_HAVE_FEXECVE 1
  #else
!     #define PATH_HAVE_FEXECVE 0
  #endif
  
  #ifdef HAVE_FPATHCONF
!     #define PATH_HAVE_FPATHCONF 1
  #else
!     #define PATH_HAVE_FPATHCONF 0
  #endif
  
  #ifdef HAVE_FSTATVFS
!     #define PATH_HAVE_FSTATVFS 1
  #else
!     #define PATH_HAVE_FSTATVFS 0
  #endif
  
  #ifdef HAVE_FTRUNCATE
!     #define PATH_HAVE_FTRUNCATE 1
  #else
!     #define PATH_HAVE_FTRUNCATE 0
  #endif
  /*[python end generated code: output=4bd4f6f7d41267f1 input=80b4c890b6774ea5]*/
  
  #ifdef MS_WINDOWS
!     #undef PATH_HAVE_FTRUNCATE
      #define PATH_HAVE_FTRUNCATE 1
  #endif
  
--- 2135,2262 ----
  [python start generated code]*/
  
  #ifdef HAVE_FACCESSAT
! #define FACCESSAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define FACCESSAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_FCHMODAT
! #define FCHMODAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define FCHMODAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_FCHOWNAT
! #define FCHOWNAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define FCHOWNAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_FSTATAT
! #define FSTATAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define FSTATAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_LINKAT
! #define LINKAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define LINKAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_MKDIRAT
! #define MKDIRAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define MKDIRAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_MKFIFOAT
! #define MKFIFOAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define MKFIFOAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_MKNODAT
! #define MKNODAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define MKNODAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_OPENAT
! #define OPENAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define OPENAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_READLINKAT
! #define READLINKAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define READLINKAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_SYMLINKAT
! #define SYMLINKAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define SYMLINKAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_UNLINKAT
! #define UNLINKAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define UNLINKAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #ifdef HAVE_FCHDIR
! #define PATH_HAVE_FCHDIR 1
  #else
! #define PATH_HAVE_FCHDIR 0
  #endif
  
  #ifdef HAVE_FCHMOD
! #define PATH_HAVE_FCHMOD 1
  #else
! #define PATH_HAVE_FCHMOD 0
  #endif
  
  #ifdef HAVE_FCHOWN
! #define PATH_HAVE_FCHOWN 1
  #else
! #define PATH_HAVE_FCHOWN 0
  #endif
  
  #ifdef HAVE_FDOPENDIR
! #define PATH_HAVE_FDOPENDIR 1
  #else
! #define PATH_HAVE_FDOPENDIR 0
  #endif
  
  #ifdef HAVE_FEXECVE
! #define PATH_HAVE_FEXECVE 1
  #else
! #define PATH_HAVE_FEXECVE 0
  #endif
  
  #ifdef HAVE_FPATHCONF
! #define PATH_HAVE_FPATHCONF 1
  #else
! #define PATH_HAVE_FPATHCONF 0
  #endif
  
  #ifdef HAVE_FSTATVFS
! #define PATH_HAVE_FSTATVFS 1
  #else
! #define PATH_HAVE_FSTATVFS 0
  #endif
  
  #ifdef HAVE_FTRUNCATE
! #define PATH_HAVE_FTRUNCATE 1
  #else
! #define PATH_HAVE_FTRUNCATE 0
  #endif
  /*[python end generated code: output=4bd4f6f7d41267f1 input=80b4c890b6774ea5]*/
  
  #ifdef MS_WINDOWS
! #undef PATH_HAVE_FTRUNCATE
      #define PATH_HAVE_FTRUNCATE 1
  #endif
  
***************
*** 2544,2552 ****
      }
      else
  #endif
!         result = access(path->narrow, mode);
      Py_END_ALLOW_THREADS
!     return_value = !result;
  #endif
  
      return return_value;
--- 2542,2550 ----
      }
      else
  #endif
!             result = access(path->narrow, mode);
      Py_END_ALLOW_THREADS
!             return_value = !result;
  #endif
  
      return return_value;
***************
*** 2645,2651 ****
          result = fchdir(path->fd);
      else
  #endif
!         result = chdir(path->narrow);
  #endif
      Py_END_ALLOW_THREADS
  
--- 2643,2649 ----
          result = fchdir(path->fd);
      else
  #endif
!             result = chdir(path->narrow);
  #endif
      Py_END_ALLOW_THREADS
  
***************
*** 2785,2791 ****
      }
      else
  #endif
!         result = chmod(path->narrow, mode);
      Py_END_ALLOW_THREADS
  
      if (result) {
--- 2783,2789 ----
      }
      else
  #endif
!             result = chmod(path->narrow, mode);
      Py_END_ALLOW_THREADS
  
      if (result) {
***************
*** 3524,3530 ****
          }
  
          Py_BEGIN_ALLOW_THREADS
!         dirp = opendir(name);
          Py_END_ALLOW_THREADS
      }
  
--- 3522,3528 ----
          }
  
          Py_BEGIN_ALLOW_THREADS
!                 dirp = opendir(name);
          Py_END_ALLOW_THREADS
      }
  
***************
*** 3545,3551 ****
      for (;;) {
          errno = 0;
          Py_BEGIN_ALLOW_THREADS
!         ep = readdir(dirp);
          Py_END_ALLOW_THREADS
          if (ep == NULL) {
              if (errno == 0) {
--- 3543,3549 ----
      for (;;) {
          errno = 0;
          Py_BEGIN_ALLOW_THREADS
!                 ep = readdir(dirp);
          Py_END_ALLOW_THREADS
          if (ep == NULL) {
              if (errno == 0) {
***************
*** 3576,3582 ****
          Py_DECREF(v);
      }
  
! exit:
      if (dirp != NULL) {
          Py_BEGIN_ALLOW_THREADS
  #ifdef HAVE_FDOPENDIR
--- 3574,3580 ----
          Py_DECREF(v);
      }
  
!     exit:
      if (dirp != NULL) {
          Py_BEGIN_ALLOW_THREADS
  #ifdef HAVE_FDOPENDIR
***************
*** 3869,3877 ****
      else
  #endif
  #if ( defined(__WATCOMC__) || defined(PYCC_VACPP) ) && !defined(__QNX__)
!         result = mkdir(path->narrow);
  #else
!         result = mkdir(path->narrow, mode);
  #endif
      Py_END_ALLOW_THREADS
      if (result < 0)
--- 3867,3875 ----
      else
  #endif
  #if ( defined(__WATCOMC__) || defined(PYCC_VACPP) ) && !defined(__QNX__)
!     result = mkdir(path->narrow);
  #else
!             result = mkdir(path->narrow, mode);
  #endif
      Py_END_ALLOW_THREADS
      if (result < 0)
***************
*** 4020,4026 ****
          result = renameat(src_dir_fd, src->narrow, dst_dir_fd, dst->narrow);
      else
  #endif
!     result = rename(src->narrow, dst->narrow);
      Py_END_ALLOW_THREADS
  
      if (result)
--- 4018,4024 ----
          result = renameat(src_dir_fd, src->narrow, dst_dir_fd, dst->narrow);
      else
  #endif
!             result = rename(src->narrow, dst->narrow);
      Py_END_ALLOW_THREADS
  
      if (result)
***************
*** 4109,4115 ****
          result = unlinkat(dir_fd, path->narrow, AT_REMOVEDIR);
      else
  #endif
!         result = rmdir(path->narrow);
  #endif
      Py_END_ALLOW_THREADS
  
--- 4107,4113 ----
          result = unlinkat(dir_fd, path->narrow, AT_REMOVEDIR);
      else
  #endif
!             result = rmdir(path->narrow);
  #endif
      Py_END_ALLOW_THREADS
  
***************
*** 4158,4164 ****
      long result;
      const char *bytes = PyBytes_AsString(command);
      Py_BEGIN_ALLOW_THREADS
!     result = system(bytes);
      Py_END_ALLOW_THREADS
      return result;
  }
--- 4156,4162 ----
      long result;
      const char *bytes = PyBytes_AsString(command);
      Py_BEGIN_ALLOW_THREADS
!             result = system(bytes);
      Py_END_ALLOW_THREADS
      return result;
  }
***************
*** 4179,4188 ****
  os_umask_impl(PyObject *module, int mask)
  /*[clinic end generated code: output=a2e33ce3bc1a6e33 input=ab6bfd9b24d8a7e8]*/
  {
!     int i = (int)umask(mask);
!     if (i < 0)
!         return posix_error();
!     return PyLong_FromLong((long)i);
  }
  
  #ifdef MS_WINDOWS
--- 4177,4184 ----
  os_umask_impl(PyObject *module, int mask)
  /*[clinic end generated code: output=a2e33ce3bc1a6e33 input=ab6bfd9b24d8a7e8]*/
  {
!     int i = 0;
!     return NULL;
  }
  
  #ifdef MS_WINDOWS
***************
*** 4248,4254 ****
      int result;
  
      Py_BEGIN_ALLOW_THREADS
!     _Py_BEGIN_SUPPRESS_IPH
  #ifdef MS_WINDOWS
      /* Windows, success=1, UNIX, success=0 */
      result = !Py_DeleteFileW(path->wide);
--- 4244,4250 ----
      int result;
  
      Py_BEGIN_ALLOW_THREADS
!             _Py_BEGIN_SUPPRESS_IPH
  #ifdef MS_WINDOWS
      /* Windows, success=1, UNIX, success=0 */
      result = !Py_DeleteFileW(path->wide);
***************
*** 4258,4267 ****
          result = unlinkat(dir_fd, path->narrow, 0);
      else
  #endif /* HAVE_UNLINKAT */
!         result = unlink(path->narrow);
  #endif
      _Py_END_SUPPRESS_IPH
!     Py_END_ALLOW_THREADS
  
      if (result)
          return path_error(path);
--- 4254,4263 ----
          result = unlinkat(dir_fd, path->narrow, 0);
      else
  #endif /* HAVE_UNLINKAT */
!     result = unlink(path->narrow);
  #endif
      _Py_END_SUPPRESS_IPH
!             Py_END_ALLOW_THREADS
  
      if (result)
          return path_error(path);
***************
*** 4290,4301 ****
  
  
  static PyStructSequence_Field uname_result_fields[] = {
!     {"sysname",    "operating system name"},
!     {"nodename",   "name of machine on network (implementation-defined)"},
!     {"release",    "operating system release"},
!     {"version",    "operating system version"},
!     {"machine",    "hardware identifier"},
!     {NULL}
  };
  
  PyDoc_STRVAR(uname_result__doc__,
--- 4286,4297 ----
  
  
  static PyStructSequence_Field uname_result_fields[] = {
!         {"sysname",    "operating system name"},
!         {"nodename",   "name of machine on network (implementation-defined)"},
!         {"release",    "operating system release"},
!         {"version",    "operating system version"},
!         {"machine",    "hardware identifier"},
!         {NULL}
  };
  
  PyDoc_STRVAR(uname_result__doc__,
***************
*** 4307,4316 ****
  See os.uname for more information.");
  
  static PyStructSequence_Desc uname_result_desc = {
!     "uname_result", /* name */
!     uname_result__doc__, /* doc */
!     uname_result_fields,
!     5
  };
  
  static PyTypeObject UnameResultType;
--- 4303,4312 ----
  See os.uname for more information.");
  
  static PyStructSequence_Desc uname_result_desc = {
!         "uname_result", /* name */
!         uname_result__doc__, /* doc */
!         uname_result_fields,
!         5
  };
  
  static PyTypeObject UnameResultType;
***************
*** 4453,4459 ****
  
      #define FUTIMENSAT_DIR_FD_CONVERTER dir_fd_converter
  #else
!     #define FUTIMENSAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #if defined(HAVE_FUTIMES) || defined(HAVE_FUTIMENS)
--- 4449,4455 ----
  
      #define FUTIMENSAT_DIR_FD_CONVERTER dir_fd_converter
  #else
! #define FUTIMENSAT_DIR_FD_CONVERTER dir_fd_unavailable
  #endif
  
  #if defined(HAVE_FUTIMES) || defined(HAVE_FUTIMENS)
***************
*** 4472,4478 ****
  
      #define PATH_UTIME_HAVE_FD 1
  #else
!     #define PATH_UTIME_HAVE_FD 0
  #endif
  
  #if defined(HAVE_UTIMENSAT) || defined(HAVE_LUTIMES)
--- 4468,4474 ----
  
      #define PATH_UTIME_HAVE_FD 1
  #else
! #define PATH_UTIME_HAVE_FD 0
  #endif
  
  #if defined(HAVE_UTIMENSAT) || defined(HAVE_LUTIMES)
***************
*** 4500,4518 ****
  static int
  utime_default(utime_t *ut, const char *path)
  {
! #ifdef HAVE_UTIMENSAT
!     UTIME_TO_TIMESPEC;
!     return utimensat(DEFAULT_DIR_FD, path, time, 0);
! #elif defined(HAVE_UTIMES)
!     UTIME_TO_TIMEVAL;
!     return utimes(path, time);
! #elif defined(HAVE_UTIME_H)
!     UTIME_TO_UTIMBUF;
!     return utime(path, time);
! #else
!     UTIME_TO_TIME_T;
!     return utime(path, time);
! #endif
  }
  
  #endif
--- 4496,4503 ----
  static int
  utime_default(utime_t *ut, const char *path)
  {
!     errno = ENOENT;
!     return -1;
  }
  
  #endif
***************
*** 4533,4539 ****
          goto exit;
  
      result = 1;
! exit:
      Py_XDECREF(divmod);
      return result;
  }
--- 4518,4524 ----
          goto exit;
  
      result = 1;
!     exit:
      Py_XDECREF(divmod);
      return result;
  }
***************
*** 4595,4602 ****
  
      if (times && (times != Py_None) && ns) {
          PyErr_SetString(PyExc_ValueError,
!                      "utime: you may specify either 'times'"
!                      " or 'ns' but not both");
          return NULL;
      }
  
--- 4580,4587 ----
  
      if (times && (times != Py_None) && ns) {
          PyErr_SetString(PyExc_ValueError,
!                         "utime: you may specify either 'times'"
!                         " or 'ns' but not both");
          return NULL;
      }
  
***************
*** 4605,4612 ****
          long a_nsec, m_nsec;
          if (!PyTuple_CheckExact(times) || (PyTuple_Size(times) != 2)) {
              PyErr_SetString(PyExc_TypeError,
!                          "utime: 'times' must be either"
!                          " a tuple of two ints or None");
              return NULL;
          }
          utime.now = 0;
--- 4590,4597 ----
          long a_nsec, m_nsec;
          if (!PyTuple_CheckExact(times) || (PyTuple_Size(times) != 2)) {
              PyErr_SetString(PyExc_TypeError,
!                             "utime: 'times' must be either"
!                             " a tuple of two ints or None");
              return NULL;
          }
          utime.now = 0;
***************
*** 4624,4635 ****
      else if (ns) {
          if (!PyTuple_CheckExact(ns) || (PyTuple_Size(ns) != 2)) {
              PyErr_SetString(PyExc_TypeError,
!                          "utime: 'ns' must be a tuple of two ints");
              return NULL;
          }
          utime.now = 0;
          if (!split_py_long_to_s_and_ns(PyTuple_GET_ITEM(ns, 0),
!                                       &utime.atime_s, &utime.atime_ns) ||
              !split_py_long_to_s_and_ns(PyTuple_GET_ITEM(ns, 1),
                                         &utime.mtime_s, &utime.mtime_ns)) {
              return NULL;
--- 4609,4620 ----
      else if (ns) {
          if (!PyTuple_CheckExact(ns) || (PyTuple_Size(ns) != 2)) {
              PyErr_SetString(PyExc_TypeError,
!                             "utime: 'ns' must be a tuple of two ints");
              return NULL;
          }
          utime.now = 0;
          if (!split_py_long_to_s_and_ns(PyTuple_GET_ITEM(ns, 0),
!                                        &utime.atime_s, &utime.atime_ns) ||
              !split_py_long_to_s_and_ns(PyTuple_GET_ITEM(ns, 1),
                                         &utime.mtime_s, &utime.mtime_ns)) {
              return NULL;
***************
*** 4653,4660 ****
  #if !defined(HAVE_UTIMENSAT)
      if ((dir_fd != DEFAULT_DIR_FD) && (!follow_symlinks)) {
          PyErr_SetString(PyExc_ValueError,
!                      "utime: cannot use dir_fd and follow_symlinks "
!                      "together on this platform");
          return NULL;
      }
  #endif
--- 4638,4645 ----
  #if !defined(HAVE_UTIMENSAT)
      if ((dir_fd != DEFAULT_DIR_FD) && (!follow_symlinks)) {
          PyErr_SetString(PyExc_ValueError,
!                         "utime: cannot use dir_fd and follow_symlinks "
!                         "together on this platform");
          return NULL;
      }
  #endif
***************
*** 4709,4715 ****
      else
  #endif
  
!     result = utime_default(&utime, path->narrow);
  
      Py_END_ALLOW_THREADS
  
--- 4694,4700 ----
      else
  #endif
  
!             result = utime_default(&utime, path->narrow);
  
      Py_END_ALLOW_THREADS
  
***************
*** 4857,4863 ****
              goto error;
          }
          keyval = PyBytes_FromFormat("%s=%s", PyBytes_AS_STRING(key2),
!                                              PyBytes_AS_STRING(val2));
  #endif
          Py_DECREF(key2);
          Py_DECREF(val2);
--- 4842,4848 ----
              goto error;
          }
          keyval = PyBytes_FromFormat("%s=%s", PyBytes_AS_STRING(key2),
!                                     PyBytes_AS_STRING(val2));
  #endif
          Py_DECREF(key2);
          Py_DECREF(val2);
***************
*** 4878,4884 ****
      *envc_ptr = envc;
      return envlist;
  
! error:
      Py_XDECREF(keys);
      Py_XDECREF(vals);
      free_string_array(envlist, envc);
--- 4863,4869 ----
      *envc_ptr = envc;
      return envlist;
  
!     error:
      Py_XDECREF(keys);
      Py_XDECREF(vals);
      free_string_array(envlist, envc);
***************
*** 4906,4912 ****
      }
      argvlist[*argc] = NULL;
      return argvlist;
! fail:
      *argc = i;
      free_string_array(argvlist, *argc);
      return NULL;
--- 4891,4897 ----
      }
      argvlist[*argc] = NULL;
      return argvlist;
!     fail:
      *argc = i;
      free_string_array(argvlist, *argc);
      return NULL;
***************
*** 4955,4961 ****
      }
      if (!argvlist[0][0]) {
          PyErr_SetString(PyExc_ValueError,
!             "execv() arg 2 first element cannot be empty");
          free_string_array(argvlist, argc);
          return NULL;
      }
--- 4940,4946 ----
      }
      if (!argvlist[0][0]) {
          PyErr_SetString(PyExc_ValueError,
!                         "execv() arg 2 first element cannot be empty");
          free_string_array(argvlist, argc);
          return NULL;
      }
***************
*** 5023,5029 ****
      }
      if (!argvlist[0][0]) {
          PyErr_SetString(PyExc_ValueError,
!             "execve: argv first element cannot be empty");
          goto fail;
      }
  
--- 5008,5014 ----
      }
      if (!argvlist[0][0]) {
          PyErr_SetString(PyExc_ValueError,
!                         "execve: argv first element cannot be empty");
          goto fail;
      }
  
***************
*** 5038,5046 ****
      else
  #endif
  #ifdef HAVE_WEXECV
!         _wexecve(path->wide, argvlist, envlist);
  #else
!         execve(path->narrow, argvlist, envlist);
  #endif
      _Py_END_SUPPRESS_IPH
  
--- 5023,5031 ----
      else
  #endif
  #ifdef HAVE_WEXECV
!     _wexecve(path->wide, argvlist, envlist);
  #else
!     execve(path->narrow, argvlist, envlist);
  #endif
      _Py_END_SUPPRESS_IPH
  
***************
*** 5049,5055 ****
      posix_path_error(path);
  
      free_string_array(envlist, envc);
!   fail:
      if (argvlist)
          free_string_array(argvlist, argc);
      return NULL;
--- 5034,5040 ----
      posix_path_error(path);
  
      free_string_array(envlist, envc);
!     fail:
      if (argvlist)
          free_string_array(argvlist, argc);
      return NULL;
***************
*** 6679,6684 ****
--- 6664,6676 ----
  os_setgroups(PyObject *module, PyObject *groups)
  /*[clinic end generated code: output=3fcb32aad58c5ecd input=fa742ca3daf85a7e]*/
  {
+ #ifdef NGROUPS_MAX
+ #define MAX_GROUPS NGROUPS_MAX
+ #else
+     /* defined to be 16 on Solaris7, so this should be a small number */
+ #define MAX_GROUPS 64
+ #endif
+ 
      Py_ssize_t i, len;
      gid_t grouplist[MAX_GROUPS];
  
***************
*** 7007,7013 ****
  
      do {
          Py_BEGIN_ALLOW_THREADS
!         pid = wait(&status);
          Py_END_ALLOW_THREADS
      } while (pid < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
      if (pid < 0)
--- 6999,7005 ----
  
      do {
          Py_BEGIN_ALLOW_THREADS
!                 pid = wait(&status);
          Py_END_ALLOW_THREADS
      } while (pid < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
      if (pid < 0)
***************
*** 7334,7345 ****
  
  
  static PyStructSequence_Field times_result_fields[] = {
!     {"user",    "user time"},
!     {"system",   "system time"},
!     {"children_user",    "user time of children"},
!     {"children_system",    "system time of children"},
!     {"elapsed",    "elapsed time since an arbitrary point in the past"},
!     {NULL}
  };
  
  PyDoc_STRVAR(times_result__doc__,
--- 7326,7337 ----
  
  
  static PyStructSequence_Field times_result_fields[] = {
!         {"user",    "user time"},
!         {"system",   "system time"},
!         {"children_user",    "user time of children"},
!         {"children_system",    "system time of children"},
!         {"elapsed",    "elapsed time since an arbitrary point in the past"},
!         {NULL}
  };
  
  PyDoc_STRVAR(times_result__doc__,
***************
*** 7352,7361 ****
  See os.times for more information.");
  
  static PyStructSequence_Desc times_result_desc = {
!     "times_result", /* name */
!     times_result__doc__, /* doc */
!     times_result_fields,
!     5
  };
  
  static PyTypeObject TimesResultType;
--- 7344,7353 ----
  See os.times for more information.");
  
  static PyStructSequence_Desc times_result_desc = {
!         "times_result", /* name */
!         times_result__doc__, /* doc */
!         times_result_fields,
!         5
  };
  
  static PyTypeObject TimesResultType;
***************
*** 7617,7623 ****
              fd = openat(dir_fd, path->narrow, flags, mode);
          else
  #endif /* HAVE_OPENAT */
!             fd = open(path->narrow, flags, mode);
  #endif /* !MS_WINDOWS */
          Py_END_ALLOW_THREADS
      } while (fd < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
--- 7609,7615 ----
              fd = openat(dir_fd, path->narrow, flags, mode);
          else
  #endif /* HAVE_OPENAT */
!                 fd = open(path->narrow, flags, mode);
  #endif /* !MS_WINDOWS */
          Py_END_ALLOW_THREADS
      } while (fd < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
***************
*** 7658,7667 ****
       * for more details.
       */
      Py_BEGIN_ALLOW_THREADS
!     _Py_BEGIN_SUPPRESS_IPH
      res = close(fd);
      _Py_END_SUPPRESS_IPH
!     Py_END_ALLOW_THREADS
      if (res < 0)
          return posix_error();
      Py_RETURN_NONE;
--- 7650,7659 ----
       * for more details.
       */
      Py_BEGIN_ALLOW_THREADS
!             _Py_BEGIN_SUPPRESS_IPH
      res = close(fd);
      _Py_END_SUPPRESS_IPH
!             Py_END_ALLOW_THREADS
      if (res < 0)
          return posix_error();
      Py_RETURN_NONE;
***************
*** 7684,7694 ****
  {
      int i;
      Py_BEGIN_ALLOW_THREADS
!     _Py_BEGIN_SUPPRESS_IPH
      for (i = Py_MAX(fd_low, 0); i < fd_high; i++)
          close(i);
      _Py_END_SUPPRESS_IPH
!     Py_END_ALLOW_THREADS
      Py_RETURN_NONE;
  }
  
--- 7676,7686 ----
  {
      int i;
      Py_BEGIN_ALLOW_THREADS
!             _Py_BEGIN_SUPPRESS_IPH
      for (i = Py_MAX(fd_low, 0); i < fd_high; i++)
          close(i);
      _Py_END_SUPPRESS_IPH
!             Py_END_ALLOW_THREADS
      Py_RETURN_NONE;
  }
  
***************
*** 7780,7795 ****
      if (inheritable || dup3_works == 0)
      {
  #endif
!         Py_BEGIN_ALLOW_THREADS
!         res = dup2(fd, fd2);
!         Py_END_ALLOW_THREADS
!         if (res < 0)
!             return posix_error();
  
!         if (!inheritable && _Py_set_inheritable(fd2, 0, NULL) < 0) {
!             close(fd2);
!             return NULL;
!         }
  #ifdef HAVE_DUP3
      }
  #endif
--- 7772,7787 ----
      if (inheritable || dup3_works == 0)
      {
  #endif
!     Py_BEGIN_ALLOW_THREADS
!             res = dup2(fd, fd2);
!     Py_END_ALLOW_THREADS
!     if (res < 0)
!         return posix_error();
  
!     if (!inheritable && _Py_set_inheritable(fd2, 0, NULL) < 0) {
!         close(fd2);
!         return NULL;
!     }
  #ifdef HAVE_DUP3
      }
  #endif
***************
*** 7867,7880 ****
          return -1;
  
      Py_BEGIN_ALLOW_THREADS
!     _Py_BEGIN_SUPPRESS_IPH
  #ifdef MS_WINDOWS
      result = _lseeki64(fd, position, how);
  #else
      result = lseek(fd, position, how);
  #endif
      _Py_END_SUPPRESS_IPH
!     Py_END_ALLOW_THREADS
      if (result < 0)
          posix_error();
  
--- 7859,7872 ----
          return -1;
  
      Py_BEGIN_ALLOW_THREADS
!             _Py_BEGIN_SUPPRESS_IPH
  #ifdef MS_WINDOWS
      result = _lseeki64(fd, position, how);
  #else
      result = lseek(fd, position, how);
  #endif
      _Py_END_SUPPRESS_IPH
!             Py_END_ALLOW_THREADS
      if (result < 0)
          posix_error();
  
***************
*** 8300,8306 ****
  
      do {
          Py_BEGIN_ALLOW_THREADS
!         res = FSTAT(fd, &st);
          Py_END_ALLOW_THREADS
      } while (res != 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
      if (res != 0) {
--- 8292,8298 ----
  
      do {
          Py_BEGIN_ALLOW_THREADS
!                 res = FSTAT(fd, &st);
          Py_END_ALLOW_THREADS
      } while (res != 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
      if (res != 0) {
***************
*** 8332,8338 ****
  {
      int return_value;
      _Py_BEGIN_SUPPRESS_IPH
!     return_value = isatty(fd);
      _Py_END_SUPPRESS_IPH
      return return_value;
  }
--- 8324,8330 ----
  {
      int return_value;
      _Py_BEGIN_SUPPRESS_IPH
!             return_value = isatty(fd);
      _Py_END_SUPPRESS_IPH
      return return_value;
  }
***************
*** 8393,8414 ****
      if (res != 0 && errno == ENOSYS)
      {
  #endif
!         Py_BEGIN_ALLOW_THREADS
!         res = pipe(fds);
!         Py_END_ALLOW_THREADS
  
!         if (res == 0) {
!             if (_Py_set_inheritable(fds[0], 0, NULL) < 0) {
!                 close(fds[0]);
!                 close(fds[1]);
!                 return NULL;
!             }
!             if (_Py_set_inheritable(fds[1], 0, NULL) < 0) {
!                 close(fds[0]);
!                 close(fds[1]);
!                 return NULL;
!             }
          }
  #ifdef HAVE_PIPE2
      }
  #endif
--- 8385,8406 ----
      if (res != 0 && errno == ENOSYS)
      {
  #endif
!     Py_BEGIN_ALLOW_THREADS
!             res = pipe(fds);
!     Py_END_ALLOW_THREADS
  
!     if (res == 0) {
!         if (_Py_set_inheritable(fds[0], 0, NULL) < 0) {
!             close(fds[0]);
!             close(fds[1]);
!             return NULL;
!         }
!         if (_Py_set_inheritable(fds[1], 0, NULL) < 0) {
!             close(fds[0]);
!             close(fds[1]);
!             return NULL;
          }
+     }
  #ifdef HAVE_PIPE2
      }
  #endif
***************
*** 9414,9420 ****
          const char *confname;
          if (!PyUnicode_Check(arg)) {
              PyErr_SetString(PyExc_TypeError,
!                 "configuration names must be strings or integers");
              return 0;
          }
          confname = PyUnicode_AsUTF8(arg);
--- 9406,9412 ----
          const char *confname;
          if (!PyUnicode_Check(arg)) {
              PyErr_SetString(PyExc_TypeError,
!                             "configuration names must be strings or integers");
              return 0;
          }
          confname = PyUnicode_AsUTF8(arg);
***************
*** 10354,10362 ****
  cmp_constdefs(const void *v1,  const void *v2)
  {
      const struct constdef *c1 =
!     (const struct constdef *) v1;
      const struct constdef *c2 =
!     (const struct constdef *) v2;
  
      return strcmp(c1->name, c2->name);
  }
--- 10346,10354 ----
  cmp_constdefs(const void *v1,  const void *v2)
  {
      const struct constdef *c1 =
!             (const struct constdef *) v1;
      const struct constdef *c2 =
!             (const struct constdef *) v2;
  
      return strcmp(c1->name, c2->name);
  }
***************
*** 10945,10963 ****
  static PyTypeObject TerminalSizeType;
  
  PyDoc_STRVAR(TerminalSize_docstring,
!     "A tuple of (columns, lines) for holding terminal window size");
  
  static PyStructSequence_Field TerminalSize_fields[] = {
!     {"columns", "width of the terminal window in characters"},
!     {"lines", "height of the terminal window in characters"},
!     {NULL, NULL}
  };
  
  static PyStructSequence_Desc TerminalSize_desc = {
!     "os.terminal_size",
!     TerminalSize_docstring,
!     TerminalSize_fields,
!     2,
  };
  
  #if defined(TERMSIZE_USE_CONIO) || defined(TERMSIZE_USE_IOCTL)
--- 10937,10955 ----
  static PyTypeObject TerminalSizeType;
  
  PyDoc_STRVAR(TerminalSize_docstring,
! "A tuple of (columns, lines) for holding terminal window size");
  
  static PyStructSequence_Field TerminalSize_fields[] = {
!         {"columns", "width of the terminal window in characters"},
!         {"lines", "height of the terminal window in characters"},
!         {NULL, NULL}
  };
  
  static PyStructSequence_Desc TerminalSize_desc = {
!         "os.terminal_size",
!         TerminalSize_docstring,
!         TerminalSize_fields,
!         2,
  };
  
  #if defined(TERMSIZE_USE_CONIO) || defined(TERMSIZE_USE_IOCTL)
***************
*** 11118,11124 ****
  {
      int return_value;
      _Py_BEGIN_SUPPRESS_IPH
!     return_value = _Py_get_inheritable(fd);
      _Py_END_SUPPRESS_IPH
      return return_value;
  }
--- 11110,11116 ----
  {
      int return_value;
      _Py_BEGIN_SUPPRESS_IPH
!             return_value = _Py_get_inheritable(fd);
      _Py_END_SUPPRESS_IPH
      return return_value;
  }
***************
*** 11140,11146 ****
      int result;
  
      _Py_BEGIN_SUPPRESS_IPH
!     result = _Py_set_inheritable(fd, inheritable, NULL);
      _Py_END_SUPPRESS_IPH
      if (result < 0)
          return NULL;
--- 11132,11138 ----
      int result;
  
      _Py_BEGIN_SUPPRESS_IPH
!             result = _Py_set_inheritable(fd, inheritable, NULL);
      _Py_END_SUPPRESS_IPH
      if (result < 0)
          return NULL;
***************
*** 11197,11203 ****
  
  #ifndef MS_WINDOWS
  PyDoc_STRVAR(get_blocking__doc__,
!     "get_blocking(fd) -> bool\n" \
      "\n" \
      "Get the blocking mode of the file descriptor:\n" \
      "False if the O_NONBLOCK flag is set, True if the flag is cleared.");
--- 11189,11195 ----
  
  #ifndef MS_WINDOWS
  PyDoc_STRVAR(get_blocking__doc__,
! "get_blocking(fd) -> bool\n" \
      "\n" \
      "Get the blocking mode of the file descriptor:\n" \
      "False if the O_NONBLOCK flag is set, True if the flag is cleared.");
***************
*** 11212,11218 ****
          return NULL;
  
      _Py_BEGIN_SUPPRESS_IPH
!     blocking = _Py_get_blocking(fd);
      _Py_END_SUPPRESS_IPH
      if (blocking < 0)
          return NULL;
--- 11204,11210 ----
          return NULL;
  
      _Py_BEGIN_SUPPRESS_IPH
!             blocking = _Py_get_blocking(fd);
      _Py_END_SUPPRESS_IPH
      if (blocking < 0)
          return NULL;
***************
*** 11220,11226 ****
  }
  
  PyDoc_STRVAR(set_blocking__doc__,
!     "set_blocking(fd, blocking)\n" \
      "\n" \
      "Set the blocking mode of the specified file descriptor.\n" \
      "Set the O_NONBLOCK flag if blocking is False,\n" \
--- 11212,11218 ----
  }
  
  PyDoc_STRVAR(set_blocking__doc__,
! "set_blocking(fd, blocking)\n" \
      "\n" \
      "Set the blocking mode of the specified file descriptor.\n" \
      "Set the O_NONBLOCK flag if blocking is False,\n" \
***************
*** 11235,11241 ****
          return NULL;
  
      _Py_BEGIN_SUPPRESS_IPH
!     result = _Py_set_blocking(fd, blocking);
      _Py_END_SUPPRESS_IPH
      if (result < 0)
          return NULL;
--- 11227,11233 ----
          return NULL;
  
      _Py_BEGIN_SUPPRESS_IPH
!             result = _Py_set_blocking(fd, blocking);
      _Py_END_SUPPRESS_IPH
      if (result < 0)
          return NULL;
***************
*** 11251,11257 ****
  
  typedef struct {
      PyObject_HEAD
!     PyObject *name;
      PyObject *path;
      PyObject *stat;
      PyObject *lstat;
--- 11243,11249 ----
  
  typedef struct {
      PyObject_HEAD
!             PyObject *name;
      PyObject *path;
      PyObject *stat;
      PyObject *lstat;
***************
*** 11412,11437 ****
  #if defined(MS_WINDOWS) || defined(HAVE_DIRENT_D_TYPE)
      if (need_stat) {
  #endif
!         stat = DirEntry_get_stat(self, follow_symlinks);
!         if (!stat) {
!             if (PyErr_ExceptionMatches(PyExc_FileNotFoundError)) {
!                 /* If file doesn't exist (anymore), then return False
!                    (i.e., say it's not a file/directory) */
!                 PyErr_Clear();
!                 return 0;
!             }
!             goto error;
          }
!         st_mode = _PyObject_GetAttrId(stat, &PyId_st_mode);
!         if (!st_mode)
!             goto error;
  
!         mode = PyLong_AsLong(st_mode);
!         if (mode == -1 && PyErr_Occurred())
!             goto error;
!         Py_CLEAR(st_mode);
!         Py_CLEAR(stat);
!         result = (mode & S_IFMT) == mode_bits;
  #if defined(MS_WINDOWS) || defined(HAVE_DIRENT_D_TYPE)
      }
      else if (is_symlink) {
--- 11404,11429 ----
  #if defined(MS_WINDOWS) || defined(HAVE_DIRENT_D_TYPE)
      if (need_stat) {
  #endif
!     stat = DirEntry_get_stat(self, follow_symlinks);
!     if (!stat) {
!         if (PyErr_ExceptionMatches(PyExc_FileNotFoundError)) {
!             /* If file doesn't exist (anymore), then return False
!                (i.e., say it's not a file/directory) */
!             PyErr_Clear();
!             return 0;
          }
!         goto error;
!     }
!     st_mode = _PyObject_GetAttrId(stat, &PyId_st_mode);
!     if (!st_mode)
!         goto error;
  
!     mode = PyLong_AsLong(st_mode);
!     if (mode == -1 && PyErr_Occurred())
!         goto error;
!     Py_CLEAR(st_mode);
!     Py_CLEAR(stat);
!     result = (mode & S_IFMT) == mode_bits;
  #if defined(MS_WINDOWS) || defined(HAVE_DIRENT_D_TYPE)
      }
      else if (is_symlink) {
***************
*** 11457,11463 ****
  
      return result;
  
! error:
      Py_XDECREF(st_mode);
      Py_XDECREF(stat);
      return -1;
--- 11449,11455 ----
  
      return result;
  
!     error:
      Py_XDECREF(st_mode);
      Py_XDECREF(stat);
      return -1;
***************
*** 11542,11607 ****
  }
  
  static PyMemberDef DirEntry_members[] = {
!     {"name", T_OBJECT_EX, offsetof(DirEntry, name), READONLY,
!      "the entry's base filename, relative to scandir() \"path\" argument"},
!     {"path", T_OBJECT_EX, offsetof(DirEntry, path), READONLY,
!      "the entry's full path name; equivalent to os.path.join(scandir_path, entry.name)"},
!     {NULL}
  };
  
  static PyMethodDef DirEntry_methods[] = {
!     {"is_dir", (PyCFunction)DirEntry_is_dir, METH_VARARGS | METH_KEYWORDS,
!      "return True if the entry is a directory; cached per entry"
!     },
!     {"is_file", (PyCFunction)DirEntry_is_file, METH_VARARGS | METH_KEYWORDS,
!      "return True if the entry is a file; cached per entry"
!     },
!     {"is_symlink", (PyCFunction)DirEntry_py_is_symlink, METH_NOARGS,
!      "return True if the entry is a symbolic link; cached per entry"
!     },
!     {"stat", (PyCFunction)DirEntry_stat, METH_VARARGS | METH_KEYWORDS,
!      "return stat_result object for the entry; cached per entry"
!     },
!     {"inode", (PyCFunction)DirEntry_inode, METH_NOARGS,
!      "return inode of the entry; cached per entry",
!     },
!     {"__fspath__", (PyCFunction)DirEntry_fspath, METH_NOARGS,
!      "returns the path for the entry",
!     },
!     {NULL}
  };
  
  static PyTypeObject DirEntryType = {
!     PyVarObject_HEAD_INIT(NULL, 0)
!     MODNAME ".DirEntry",                    /* tp_name */
!     sizeof(DirEntry),                       /* tp_basicsize */
!     0,                                      /* tp_itemsize */
!     /* methods */
!     (destructor)DirEntry_dealloc,           /* tp_dealloc */
!     0,                                      /* tp_print */
!     0,                                      /* tp_getattr */
!     0,                                      /* tp_setattr */
!     0,                                      /* tp_compare */
!     (reprfunc)DirEntry_repr,                /* tp_repr */
!     0,                                      /* tp_as_number */
!     0,                                      /* tp_as_sequence */
!     0,                                      /* tp_as_mapping */
!     0,                                      /* tp_hash */
!     0,                                      /* tp_call */
!     0,                                      /* tp_str */
!     0,                                      /* tp_getattro */
!     0,                                      /* tp_setattro */
!     0,                                      /* tp_as_buffer */
!     Py_TPFLAGS_DEFAULT,                     /* tp_flags */
!     0,                                      /* tp_doc */
!     0,                                      /* tp_traverse */
!     0,                                      /* tp_clear */
!     0,                                      /* tp_richcompare */
!     0,                                      /* tp_weaklistoffset */
!     0,                                      /* tp_iter */
!     0,                                      /* tp_iternext */
!     DirEntry_methods,                       /* tp_methods */
!     DirEntry_members,                       /* tp_members */
  };
  
  #ifdef MS_WINDOWS
--- 11534,11599 ----
  }
  
  static PyMemberDef DirEntry_members[] = {
!         {"name", T_OBJECT_EX, offsetof(DirEntry, name), READONLY,
!                 "the entry's base filename, relative to scandir() \"path\" argument"},
!         {"path", T_OBJECT_EX, offsetof(DirEntry, path), READONLY,
!                 "the entry's full path name; equivalent to os.path.join(scandir_path, entry.name)"},
!         {NULL}
  };
  
  static PyMethodDef DirEntry_methods[] = {
!         {"is_dir", (PyCFunction)DirEntry_is_dir, METH_VARARGS | METH_KEYWORDS,
!                 "return True if the entry is a directory; cached per entry"
!         },
!         {"is_file", (PyCFunction)DirEntry_is_file, METH_VARARGS | METH_KEYWORDS,
!                 "return True if the entry is a file; cached per entry"
!         },
!         {"is_symlink", (PyCFunction)DirEntry_py_is_symlink, METH_NOARGS,
!                 "return True if the entry is a symbolic link; cached per entry"
!         },
!         {"stat", (PyCFunction)DirEntry_stat, METH_VARARGS | METH_KEYWORDS,
!                 "return stat_result object for the entry; cached per entry"
!         },
!         {"inode", (PyCFunction)DirEntry_inode, METH_NOARGS,
!                 "return inode of the entry; cached per entry",
!         },
!         {"__fspath__", (PyCFunction)DirEntry_fspath, METH_NOARGS,
!                 "returns the path for the entry",
!         },
!         {NULL}
  };
  
  static PyTypeObject DirEntryType = {
!         PyVarObject_HEAD_INIT(NULL, 0)
!         MODNAME ".DirEntry",                    /* tp_name */
!         sizeof(DirEntry),                       /* tp_basicsize */
!         0,                                      /* tp_itemsize */
!         /* methods */
!         (destructor)DirEntry_dealloc,           /* tp_dealloc */
!         0,                                      /* tp_print */
!         0,                                      /* tp_getattr */
!         0,                                      /* tp_setattr */
!         0,                                      /* tp_compare */
!         (reprfunc)DirEntry_repr,                /* tp_repr */
!         0,                                      /* tp_as_number */
!         0,                                      /* tp_as_sequence */
!         0,                                      /* tp_as_mapping */
!         0,                                      /* tp_hash */
!         0,                                      /* tp_call */
!         0,                                      /* tp_str */
!         0,                                      /* tp_getattro */
!         0,                                      /* tp_setattro */
!         0,                                      /* tp_as_buffer */
!         Py_TPFLAGS_DEFAULT,                     /* tp_flags */
!         0,                                      /* tp_doc */
!         0,                                      /* tp_traverse */
!         0,                                      /* tp_clear */
!         0,                                      /* tp_richcompare */
!         0,                                      /* tp_weaklistoffset */
!         0,                                      /* tp_iter */
!         0,                                      /* tp_iternext */
!         DirEntry_methods,                       /* tp_methods */
!         DirEntry_members,                       /* tp_members */
  };
  
  #ifdef MS_WINDOWS
***************
*** 11727,11735 ****
  DirEntry_from_posix_info(path_t *path, const char *name, Py_ssize_t name_len,
                           ino_t d_ino
  #ifdef HAVE_DIRENT_D_TYPE
!                          , unsigned char d_type
  #endif
!                          )
  {
      DirEntry *entry;
      char *joined_path;
--- 11719,11727 ----
  DirEntry_from_posix_info(path_t *path, const char *name, Py_ssize_t name_len,
                           ino_t d_ino
  #ifdef HAVE_DIRENT_D_TYPE
!         , unsigned char d_type
  #endif
! )
  {
      DirEntry *entry;
      char *joined_path;
***************
*** 11765,11771 ****
  
      return (PyObject *)entry;
  
! error:
      Py_XDECREF(entry);
      return NULL;
  }
--- 11757,11763 ----
  
      return (PyObject *)entry;
  
!     error:
      Py_XDECREF(entry);
      return NULL;
  }
***************
*** 11775,11781 ****
  
  typedef struct {
      PyObject_HEAD
!     path_t path;
  #ifdef MS_WINDOWS
      HANDLE handle;
      WIN32_FIND_DATAW file_data;
--- 11767,11773 ----
  
  typedef struct {
      PyObject_HEAD
!             path_t path;
  #ifdef MS_WINDOWS
      HANDLE handle;
      WIN32_FIND_DATAW file_data;
***************
*** 11887,11893 ****
      while (1) {
          errno = 0;
          Py_BEGIN_ALLOW_THREADS
!         direntp = readdir(iterator->dirp);
          Py_END_ALLOW_THREADS
  
          if (!direntp) {
--- 11879,11885 ----
      while (1) {
          errno = 0;
          Py_BEGIN_ALLOW_THREADS
!                 direntp = readdir(iterator->dirp);
          Py_END_ALLOW_THREADS
  
          if (!direntp) {
***************
*** 11903,11913 ****
                   (name_len == 1 || (direntp->d_name[1] == '.' && name_len == 2));
          if (!is_dot) {
              entry = DirEntry_from_posix_info(&iterator->path, direntp->d_name,
!                                             name_len, direntp->d_ino
  #ifdef HAVE_DIRENT_D_TYPE
!                                             , direntp->d_type
  #endif
!                                             );
              if (!entry)
                  break;
              return entry;
--- 11895,11905 ----
                   (name_len == 1 || (direntp->d_name[1] == '.' && name_len == 2));
          if (!is_dot) {
              entry = DirEntry_from_posix_info(&iterator->path, direntp->d_name,
!                                              name_len, direntp->d_ino
  #ifdef HAVE_DIRENT_D_TYPE
!                     , direntp->d_type
  #endif
!             );
              if (!entry)
                  break;
              return entry;
***************
*** 11980,12042 ****
  }
  
  static PyMethodDef ScandirIterator_methods[] = {
!     {"__enter__", (PyCFunction)ScandirIterator_enter, METH_NOARGS},
!     {"__exit__", (PyCFunction)ScandirIterator_exit, METH_VARARGS},
!     {"close", (PyCFunction)ScandirIterator_close, METH_NOARGS},
!     {NULL}
  };
  
  static PyTypeObject ScandirIteratorType = {
!     PyVarObject_HEAD_INIT(NULL, 0)
!     MODNAME ".ScandirIterator",             /* tp_name */
!     sizeof(ScandirIterator),                /* tp_basicsize */
!     0,                                      /* tp_itemsize */
!     /* methods */
!     (destructor)ScandirIterator_dealloc,    /* tp_dealloc */
!     0,                                      /* tp_print */
!     0,                                      /* tp_getattr */
!     0,                                      /* tp_setattr */
!     0,                                      /* tp_compare */
!     0,                                      /* tp_repr */
!     0,                                      /* tp_as_number */
!     0,                                      /* tp_as_sequence */
!     0,                                      /* tp_as_mapping */
!     0,                                      /* tp_hash */
!     0,                                      /* tp_call */
!     0,                                      /* tp_str */
!     0,                                      /* tp_getattro */
!     0,                                      /* tp_setattro */
!     0,                                      /* tp_as_buffer */
!     Py_TPFLAGS_DEFAULT
          | Py_TPFLAGS_HAVE_FINALIZE,         /* tp_flags */
!     0,                                      /* tp_doc */
!     0,                                      /* tp_traverse */
!     0,                                      /* tp_clear */
!     0,                                      /* tp_richcompare */
!     0,                                      /* tp_weaklistoffset */
!     PyObject_SelfIter,                      /* tp_iter */
!     (iternextfunc)ScandirIterator_iternext, /* tp_iternext */
!     ScandirIterator_methods,                /* tp_methods */
!     0,                                      /* tp_members */
!     0,                                      /* tp_getset */
!     0,                                      /* tp_base */
!     0,                                      /* tp_dict */
!     0,                                      /* tp_descr_get */
!     0,                                      /* tp_descr_set */
!     0,                                      /* tp_dictoffset */
!     0,                                      /* tp_init */
!     0,                                      /* tp_alloc */
!     0,                                      /* tp_new */
!     0,                                      /* tp_free */
!     0,                                      /* tp_is_gc */
!     0,                                      /* tp_bases */
!     0,                                      /* tp_mro */
!     0,                                      /* tp_cache */
!     0,                                      /* tp_subclasses */
!     0,                                      /* tp_weaklist */
!     0,                                      /* tp_del */
!     0,                                      /* tp_version_tag */
!     (destructor)ScandirIterator_finalize,   /* tp_finalize */
  };
  
  static PyObject *
--- 11972,12034 ----
  }
  
  static PyMethodDef ScandirIterator_methods[] = {
!         {"__enter__", (PyCFunction)ScandirIterator_enter, METH_NOARGS},
!         {"__exit__", (PyCFunction)ScandirIterator_exit, METH_VARARGS},
!         {"close", (PyCFunction)ScandirIterator_close, METH_NOARGS},
!         {NULL}
  };
  
  static PyTypeObject ScandirIteratorType = {
!         PyVarObject_HEAD_INIT(NULL, 0)
!         MODNAME ".ScandirIterator",             /* tp_name */
!         sizeof(ScandirIterator),                /* tp_basicsize */
!         0,                                      /* tp_itemsize */
!         /* methods */
!         (destructor)ScandirIterator_dealloc,    /* tp_dealloc */
!         0,                                      /* tp_print */
!         0,                                      /* tp_getattr */
!         0,                                      /* tp_setattr */
!         0,                                      /* tp_compare */
!         0,                                      /* tp_repr */
!         0,                                      /* tp_as_number */
!         0,                                      /* tp_as_sequence */
!         0,                                      /* tp_as_mapping */
!         0,                                      /* tp_hash */
!         0,                                      /* tp_call */
!         0,                                      /* tp_str */
!         0,                                      /* tp_getattro */
!         0,                                      /* tp_setattro */
!         0,                                      /* tp_as_buffer */
!         Py_TPFLAGS_DEFAULT
          | Py_TPFLAGS_HAVE_FINALIZE,         /* tp_flags */
!         0,                                      /* tp_doc */
!         0,                                      /* tp_traverse */
!         0,                                      /* tp_clear */
!         0,                                      /* tp_richcompare */
!         0,                                      /* tp_weaklistoffset */
!         PyObject_SelfIter,                      /* tp_iter */
!         (iternextfunc)ScandirIterator_iternext, /* tp_iternext */
!         ScandirIterator_methods,                /* tp_methods */
!         0,                                      /* tp_members */
!         0,                                      /* tp_getset */
!         0,                                      /* tp_base */
!         0,                                      /* tp_dict */
!         0,                                      /* tp_descr_get */
!         0,                                      /* tp_descr_set */
!         0,                                      /* tp_dictoffset */
!         0,                                      /* tp_init */
!         0,                                      /* tp_alloc */
!         0,                                      /* tp_new */
!         0,                                      /* tp_free */
!         0,                                      /* tp_is_gc */
!         0,                                      /* tp_bases */
!         0,                                      /* tp_mro */
!         0,                                      /* tp_cache */
!         0,                                      /* tp_subclasses */
!         0,                                      /* tp_weaklist */
!         0,                                      /* tp_del */
!         0,                                      /* tp_version_tag */
!         (destructor)ScandirIterator_finalize,   /* tp_finalize */
  };
  
  static PyObject *
***************
*** 12103,12109 ****
  
      return (PyObject *)iterator;
  
! error:
      Py_DECREF(iterator);
      return NULL;
  }
--- 12095,12101 ----
  
      return (PyObject *)iterator;
  
!     error:
      Py_DECREF(iterator);
      return NULL;
  }
***************
*** 12245,12442 ****
  
  static PyMethodDef posix_methods[] = {
  
!     OS_STAT_METHODDEF
!     OS_ACCESS_METHODDEF
!     OS_TTYNAME_METHODDEF
!     OS_CHDIR_METHODDEF
!     OS_CHFLAGS_METHODDEF
!     OS_CHMOD_METHODDEF
!     OS_FCHMOD_METHODDEF
!     OS_LCHMOD_METHODDEF
!     OS_CHOWN_METHODDEF
!     OS_FCHOWN_METHODDEF
!     OS_LCHOWN_METHODDEF
!     OS_LCHFLAGS_METHODDEF
!     OS_CHROOT_METHODDEF
!     OS_CTERMID_METHODDEF
!     OS_GETCWD_METHODDEF
!     OS_GETCWDB_METHODDEF
!     OS_LINK_METHODDEF
!     OS_LISTDIR_METHODDEF
!     OS_LSTAT_METHODDEF
!     OS_MKDIR_METHODDEF
!     OS_NICE_METHODDEF
!     OS_GETPRIORITY_METHODDEF
!     OS_SETPRIORITY_METHODDEF
  #ifdef HAVE_READLINK
!     {"readlink",        (PyCFunction)posix_readlink,
                          METH_VARARGS | METH_KEYWORDS,
                          readlink__doc__},
  #endif /* HAVE_READLINK */
  #if !defined(HAVE_READLINK) && defined(MS_WINDOWS)
!     {"readlink",        (PyCFunction)win_readlink,
                          METH_VARARGS | METH_KEYWORDS,
                          readlink__doc__},
  #endif /* !defined(HAVE_READLINK) && defined(MS_WINDOWS) */
!     OS_RENAME_METHODDEF
!     OS_REPLACE_METHODDEF
!     OS_RMDIR_METHODDEF
!     {"stat_float_times", stat_float_times, METH_VARARGS, stat_float_times__doc__},
!     OS_SYMLINK_METHODDEF
!     OS_SYSTEM_METHODDEF
!     OS_UMASK_METHODDEF
!     OS_UNAME_METHODDEF
!     OS_UNLINK_METHODDEF
!     OS_REMOVE_METHODDEF
!     OS_UTIME_METHODDEF
!     OS_TIMES_METHODDEF
!     OS__EXIT_METHODDEF
!     OS_EXECV_METHODDEF
!     OS_EXECVE_METHODDEF
!     OS_SPAWNV_METHODDEF
!     OS_SPAWNVE_METHODDEF
!     OS_FORK1_METHODDEF
!     OS_FORK_METHODDEF
!     OS_SCHED_GET_PRIORITY_MAX_METHODDEF
!     OS_SCHED_GET_PRIORITY_MIN_METHODDEF
!     OS_SCHED_GETPARAM_METHODDEF
!     OS_SCHED_GETSCHEDULER_METHODDEF
!     OS_SCHED_RR_GET_INTERVAL_METHODDEF
!     OS_SCHED_SETPARAM_METHODDEF
!     OS_SCHED_SETSCHEDULER_METHODDEF
!     OS_SCHED_YIELD_METHODDEF
!     OS_SCHED_SETAFFINITY_METHODDEF
!     OS_SCHED_GETAFFINITY_METHODDEF
!     OS_OPENPTY_METHODDEF
!     OS_FORKPTY_METHODDEF
!     OS_GETEGID_METHODDEF
!     OS_GETEUID_METHODDEF
!     OS_GETGID_METHODDEF
  #ifdef HAVE_GETGROUPLIST
!     {"getgrouplist",    posix_getgrouplist, METH_VARARGS, posix_getgrouplist__doc__},
  #endif
!     OS_GETGROUPS_METHODDEF
!     OS_GETPID_METHODDEF
!     OS_GETPGRP_METHODDEF
!     OS_GETPPID_METHODDEF
!     OS_GETUID_METHODDEF
!     OS_GETLOGIN_METHODDEF
!     OS_KILL_METHODDEF
!     OS_KILLPG_METHODDEF
!     OS_PLOCK_METHODDEF
! #ifdef MS_WINDOWS
!     OS_STARTFILE_METHODDEF
! #endif
!     OS_SETUID_METHODDEF
!     OS_SETEUID_METHODDEF
!     OS_SETREUID_METHODDEF
!     OS_SETGID_METHODDEF
!     OS_SETEGID_METHODDEF
!     OS_SETREGID_METHODDEF
!     OS_SETGROUPS_METHODDEF
  #ifdef HAVE_INITGROUPS
!     {"initgroups",      posix_initgroups, METH_VARARGS, posix_initgroups__doc__},
  #endif /* HAVE_INITGROUPS */
!     OS_GETPGID_METHODDEF
!     OS_SETPGRP_METHODDEF
!     OS_WAIT_METHODDEF
!     OS_WAIT3_METHODDEF
!     OS_WAIT4_METHODDEF
!     OS_WAITID_METHODDEF
!     OS_WAITPID_METHODDEF
!     OS_GETSID_METHODDEF
!     OS_SETSID_METHODDEF
!     OS_SETPGID_METHODDEF
!     OS_TCGETPGRP_METHODDEF
!     OS_TCSETPGRP_METHODDEF
!     OS_OPEN_METHODDEF
!     OS_CLOSE_METHODDEF
!     OS_CLOSERANGE_METHODDEF
!     OS_DEVICE_ENCODING_METHODDEF
!     OS_DUP_METHODDEF
!     OS_DUP2_METHODDEF
!     OS_LOCKF_METHODDEF
!     OS_LSEEK_METHODDEF
!     OS_READ_METHODDEF
!     OS_READV_METHODDEF
!     OS_PREAD_METHODDEF
!     OS_WRITE_METHODDEF
!     OS_WRITEV_METHODDEF
!     OS_PWRITE_METHODDEF
  #ifdef HAVE_SENDFILE
!     {"sendfile",        (PyCFunction)posix_sendfile, METH_VARARGS | METH_KEYWORDS,
                              posix_sendfile__doc__},
  #endif
!     OS_FSTAT_METHODDEF
!     OS_ISATTY_METHODDEF
!     OS_PIPE_METHODDEF
!     OS_PIPE2_METHODDEF
!     OS_MKFIFO_METHODDEF
!     OS_MKNOD_METHODDEF
!     OS_MAJOR_METHODDEF
!     OS_MINOR_METHODDEF
!     OS_MAKEDEV_METHODDEF
!     OS_FTRUNCATE_METHODDEF
!     OS_TRUNCATE_METHODDEF
!     OS_POSIX_FALLOCATE_METHODDEF
!     OS_POSIX_FADVISE_METHODDEF
!     OS_PUTENV_METHODDEF
!     OS_UNSETENV_METHODDEF
!     OS_STRERROR_METHODDEF
!     OS_FCHDIR_METHODDEF
!     OS_FSYNC_METHODDEF
!     OS_SYNC_METHODDEF
!     OS_FDATASYNC_METHODDEF
!     OS_WCOREDUMP_METHODDEF
!     OS_WIFCONTINUED_METHODDEF
!     OS_WIFSTOPPED_METHODDEF
!     OS_WIFSIGNALED_METHODDEF
!     OS_WIFEXITED_METHODDEF
!     OS_WEXITSTATUS_METHODDEF
!     OS_WTERMSIG_METHODDEF
!     OS_WSTOPSIG_METHODDEF
!     OS_FSTATVFS_METHODDEF
!     OS_STATVFS_METHODDEF
!     OS_CONFSTR_METHODDEF
!     OS_SYSCONF_METHODDEF
!     OS_FPATHCONF_METHODDEF
!     OS_PATHCONF_METHODDEF
!     OS_ABORT_METHODDEF
!     OS__GETFULLPATHNAME_METHODDEF
!     OS__ISDIR_METHODDEF
!     OS__GETDISKUSAGE_METHODDEF
!     OS__GETFINALPATHNAME_METHODDEF
!     OS__GETVOLUMEPATHNAME_METHODDEF
!     OS_GETLOADAVG_METHODDEF
!     OS_URANDOM_METHODDEF
!     OS_SETRESUID_METHODDEF
!     OS_SETRESGID_METHODDEF
!     OS_GETRESUID_METHODDEF
!     OS_GETRESGID_METHODDEF
! 
!     OS_GETXATTR_METHODDEF
!     OS_SETXATTR_METHODDEF
!     OS_REMOVEXATTR_METHODDEF
!     OS_LISTXATTR_METHODDEF
  
  #if defined(TERMSIZE_USE_CONIO) || defined(TERMSIZE_USE_IOCTL)
!     {"get_terminal_size", get_terminal_size, METH_VARARGS, termsize__doc__},
  #endif
!     OS_CPU_COUNT_METHODDEF
!     OS_GET_INHERITABLE_METHODDEF
!     OS_SET_INHERITABLE_METHODDEF
!     OS_GET_HANDLE_INHERITABLE_METHODDEF
!     OS_SET_HANDLE_INHERITABLE_METHODDEF
  #ifndef MS_WINDOWS
!     {"get_blocking", posix_get_blocking, METH_VARARGS, get_blocking__doc__},
!     {"set_blocking", posix_set_blocking, METH_VARARGS, set_blocking__doc__},
  #endif
!     {"scandir",         (PyCFunction)posix_scandir,
!                         METH_VARARGS | METH_KEYWORDS,
!                         posix_scandir__doc__},
!     OS_FSPATH_METHODDEF
!     OS_GETRANDOM_METHODDEF
!     {NULL,              NULL}            /* Sentinel */
  };
  
  
--- 12237,12434 ----
  
  static PyMethodDef posix_methods[] = {
  
!         OS_STAT_METHODDEF
!         OS_ACCESS_METHODDEF
!         OS_TTYNAME_METHODDEF
!         OS_CHDIR_METHODDEF
!         OS_CHFLAGS_METHODDEF
!         OS_CHMOD_METHODDEF
!         OS_FCHMOD_METHODDEF
!         OS_LCHMOD_METHODDEF
!         OS_CHOWN_METHODDEF
!         OS_FCHOWN_METHODDEF
!         OS_LCHOWN_METHODDEF
!         OS_LCHFLAGS_METHODDEF
!         OS_CHROOT_METHODDEF
!         OS_CTERMID_METHODDEF
!         OS_GETCWD_METHODDEF
!         OS_GETCWDB_METHODDEF
!         OS_LINK_METHODDEF
!         OS_LISTDIR_METHODDEF
!         OS_LSTAT_METHODDEF
!         OS_MKDIR_METHODDEF
!         OS_NICE_METHODDEF
!         OS_GETPRIORITY_METHODDEF
!         OS_SETPRIORITY_METHODDEF
  #ifdef HAVE_READLINK
!         {"readlink",        (PyCFunction)posix_readlink,
                          METH_VARARGS | METH_KEYWORDS,
                          readlink__doc__},
  #endif /* HAVE_READLINK */
  #if !defined(HAVE_READLINK) && defined(MS_WINDOWS)
!         {"readlink",        (PyCFunction)win_readlink,
                          METH_VARARGS | METH_KEYWORDS,
                          readlink__doc__},
  #endif /* !defined(HAVE_READLINK) && defined(MS_WINDOWS) */
!         OS_RENAME_METHODDEF
!         OS_REPLACE_METHODDEF
!         OS_RMDIR_METHODDEF
!         {"stat_float_times", stat_float_times, METH_VARARGS, stat_float_times__doc__},
!         OS_SYMLINK_METHODDEF
!         OS_SYSTEM_METHODDEF
!         OS_UMASK_METHODDEF
!         OS_UNAME_METHODDEF
!         OS_UNLINK_METHODDEF
!         OS_REMOVE_METHODDEF
!         OS_UTIME_METHODDEF
!         OS_TIMES_METHODDEF
!         OS__EXIT_METHODDEF
!         OS_EXECV_METHODDEF
!         OS_EXECVE_METHODDEF
!         OS_SPAWNV_METHODDEF
!         OS_SPAWNVE_METHODDEF
!         OS_FORK1_METHODDEF
!         OS_FORK_METHODDEF
!         OS_SCHED_GET_PRIORITY_MAX_METHODDEF
!         OS_SCHED_GET_PRIORITY_MIN_METHODDEF
!         OS_SCHED_GETPARAM_METHODDEF
!         OS_SCHED_GETSCHEDULER_METHODDEF
!         OS_SCHED_RR_GET_INTERVAL_METHODDEF
!         OS_SCHED_SETPARAM_METHODDEF
!         OS_SCHED_SETSCHEDULER_METHODDEF
!         OS_SCHED_YIELD_METHODDEF
!         OS_SCHED_SETAFFINITY_METHODDEF
!         OS_SCHED_GETAFFINITY_METHODDEF
!         OS_OPENPTY_METHODDEF
!         OS_FORKPTY_METHODDEF
!         OS_GETEGID_METHODDEF
!         OS_GETEUID_METHODDEF
!         OS_GETGID_METHODDEF
  #ifdef HAVE_GETGROUPLIST
!         {"getgrouplist",    posix_getgrouplist, METH_VARARGS, posix_getgrouplist__doc__},
  #endif
!         OS_GETGROUPS_METHODDEF
!         OS_GETPID_METHODDEF
!         OS_GETPGRP_METHODDEF
!         OS_GETPPID_METHODDEF
!         OS_GETUID_METHODDEF
!         OS_GETLOGIN_METHODDEF
!         OS_KILL_METHODDEF
!         OS_KILLPG_METHODDEF
!         OS_PLOCK_METHODDEF
! #ifdef MS_WINDOWS
!         OS_STARTFILE_METHODDEF
! #endif
!         OS_SETUID_METHODDEF
!         OS_SETEUID_METHODDEF
!         OS_SETREUID_METHODDEF
!         OS_SETGID_METHODDEF
!         OS_SETEGID_METHODDEF
!         OS_SETREGID_METHODDEF
!         OS_SETGROUPS_METHODDEF
  #ifdef HAVE_INITGROUPS
!         {"initgroups",      posix_initgroups, METH_VARARGS, posix_initgroups__doc__},
  #endif /* HAVE_INITGROUPS */
!         OS_GETPGID_METHODDEF
!         OS_SETPGRP_METHODDEF
!         OS_WAIT_METHODDEF
!         OS_WAIT3_METHODDEF
!         OS_WAIT4_METHODDEF
!         OS_WAITID_METHODDEF
!         OS_WAITPID_METHODDEF
!         OS_GETSID_METHODDEF
!         OS_SETSID_METHODDEF
!         OS_SETPGID_METHODDEF
!         OS_TCGETPGRP_METHODDEF
!         OS_TCSETPGRP_METHODDEF
!         OS_OPEN_METHODDEF
!         OS_CLOSE_METHODDEF
!         OS_CLOSERANGE_METHODDEF
!         OS_DEVICE_ENCODING_METHODDEF
!         OS_DUP_METHODDEF
!         OS_DUP2_METHODDEF
!         OS_LOCKF_METHODDEF
!         OS_LSEEK_METHODDEF
!         OS_READ_METHODDEF
!         OS_READV_METHODDEF
!         OS_PREAD_METHODDEF
!         OS_WRITE_METHODDEF
!         OS_WRITEV_METHODDEF
!         OS_PWRITE_METHODDEF
  #ifdef HAVE_SENDFILE
!         {"sendfile",        (PyCFunction)posix_sendfile, METH_VARARGS | METH_KEYWORDS,
                              posix_sendfile__doc__},
  #endif
!         OS_FSTAT_METHODDEF
!         OS_ISATTY_METHODDEF
!         OS_PIPE_METHODDEF
!         OS_PIPE2_METHODDEF
!         OS_MKFIFO_METHODDEF
!         OS_MKNOD_METHODDEF
!         OS_MAJOR_METHODDEF
!         OS_MINOR_METHODDEF
!         OS_MAKEDEV_METHODDEF
!         OS_FTRUNCATE_METHODDEF
!         OS_TRUNCATE_METHODDEF
!         OS_POSIX_FALLOCATE_METHODDEF
!         OS_POSIX_FADVISE_METHODDEF
!         OS_PUTENV_METHODDEF
!         OS_UNSETENV_METHODDEF
!         OS_STRERROR_METHODDEF
!         OS_FCHDIR_METHODDEF
!         OS_FSYNC_METHODDEF
!         OS_SYNC_METHODDEF
!         OS_FDATASYNC_METHODDEF
!         OS_WCOREDUMP_METHODDEF
!         OS_WIFCONTINUED_METHODDEF
!         OS_WIFSTOPPED_METHODDEF
!         OS_WIFSIGNALED_METHODDEF
!         OS_WIFEXITED_METHODDEF
!         OS_WEXITSTATUS_METHODDEF
!         OS_WTERMSIG_METHODDEF
!         OS_WSTOPSIG_METHODDEF
!         OS_FSTATVFS_METHODDEF
!         OS_STATVFS_METHODDEF
!         OS_CONFSTR_METHODDEF
!         OS_SYSCONF_METHODDEF
!         OS_FPATHCONF_METHODDEF
!         OS_PATHCONF_METHODDEF
!         OS_ABORT_METHODDEF
!         OS__GETFULLPATHNAME_METHODDEF
!         OS__ISDIR_METHODDEF
!         OS__GETDISKUSAGE_METHODDEF
!         OS__GETFINALPATHNAME_METHODDEF
!         OS__GETVOLUMEPATHNAME_METHODDEF
!         OS_GETLOADAVG_METHODDEF
!         OS_URANDOM_METHODDEF
!         OS_SETRESUID_METHODDEF
!         OS_SETRESGID_METHODDEF
!         OS_GETRESUID_METHODDEF
!         OS_GETRESGID_METHODDEF
! 
!         OS_GETXATTR_METHODDEF
!         OS_SETXATTR_METHODDEF
!         OS_REMOVEXATTR_METHODDEF
!         OS_LISTXATTR_METHODDEF
  
  #if defined(TERMSIZE_USE_CONIO) || defined(TERMSIZE_USE_IOCTL)
!         {"get_terminal_size", get_terminal_size, METH_VARARGS, termsize__doc__},
  #endif
!         OS_CPU_COUNT_METHODDEF
!         OS_GET_INHERITABLE_METHODDEF
!         OS_SET_INHERITABLE_METHODDEF
!         OS_GET_HANDLE_INHERITABLE_METHODDEF
!         OS_SET_HANDLE_INHERITABLE_METHODDEF
  #ifndef MS_WINDOWS
!         {"get_blocking", posix_get_blocking, METH_VARARGS, get_blocking__doc__},
!         {"set_blocking", posix_set_blocking, METH_VARARGS, set_blocking__doc__},
  #endif
!         {"scandir",         (PyCFunction)posix_scandir,
!                     METH_VARARGS | METH_KEYWORDS,
!                     posix_scandir__doc__},
!         OS_FSPATH_METHODDEF
!         OS_GETRANDOM_METHODDEF
!         {NULL,              NULL}            /* Sentinel */
  };
  
  
***************
*** 12707,12713 ****
      if (PyModule_AddIntMacro(m, ST_NOSUID)) return -1;
  #endif /* ST_NOSUID */
  
!        /* GNU extensions */
  #ifdef ST_NODEV
      if (PyModule_AddIntMacro(m, ST_NODEV)) return -1;
  #endif /* ST_NODEV */
--- 12699,12705 ----
      if (PyModule_AddIntMacro(m, ST_NOSUID)) return -1;
  #endif /* ST_NOSUID */
  
!     /* GNU extensions */
  #ifdef ST_NODEV
      if (PyModule_AddIntMacro(m, ST_NODEV)) return -1;
  #endif /* ST_NODEV */
***************
*** 12818,12824 ****
  #endif
  
  #ifdef HAVE_SCHED_H
! #ifdef SCHED_OTHER
      if (PyModule_AddIntMacro(m, SCHED_OTHER)) return -1;
  #endif
  #ifdef SCHED_FIFO
--- 12810,12816 ----
  #endif
  
  #ifdef HAVE_SCHED_H
!     #ifdef SCHED_OTHER
      if (PyModule_AddIntMacro(m, SCHED_OTHER)) return -1;
  #endif
  #ifdef SCHED_FIFO
***************
*** 12891,13035 ****
  
  
  static struct PyModuleDef posixmodule = {
!     PyModuleDef_HEAD_INIT,
!     MODNAME,
!     posix__doc__,
!     -1,
!     posix_methods,
!     NULL,
!     NULL,
!     NULL,
!     NULL
  };
  
  
  static const char * const have_functions[] = {
  
  #ifdef HAVE_FACCESSAT
!     "HAVE_FACCESSAT",
  #endif
  
  #ifdef HAVE_FCHDIR
!     "HAVE_FCHDIR",
  #endif
  
  #ifdef HAVE_FCHMOD
!     "HAVE_FCHMOD",
  #endif
  
  #ifdef HAVE_FCHMODAT
!     "HAVE_FCHMODAT",
  #endif
  
  #ifdef HAVE_FCHOWN
!     "HAVE_FCHOWN",
  #endif
  
  #ifdef HAVE_FCHOWNAT
!     "HAVE_FCHOWNAT",
  #endif
  
  #ifdef HAVE_FEXECVE
!     "HAVE_FEXECVE",
  #endif
  
  #ifdef HAVE_FDOPENDIR
!     "HAVE_FDOPENDIR",
  #endif
  
  #ifdef HAVE_FPATHCONF
!     "HAVE_FPATHCONF",
  #endif
  
  #ifdef HAVE_FSTATAT
!     "HAVE_FSTATAT",
  #endif
  
  #ifdef HAVE_FSTATVFS
!     "HAVE_FSTATVFS",
  #endif
  
  #if defined HAVE_FTRUNCATE || defined MS_WINDOWS
!     "HAVE_FTRUNCATE",
  #endif
  
  #ifdef HAVE_FUTIMENS
!     "HAVE_FUTIMENS",
  #endif
  
  #ifdef HAVE_FUTIMES
!     "HAVE_FUTIMES",
  #endif
  
  #ifdef HAVE_FUTIMESAT
!     "HAVE_FUTIMESAT",
  #endif
  
  #ifdef HAVE_LINKAT
!     "HAVE_LINKAT",
  #endif
  
  #ifdef HAVE_LCHFLAGS
!     "HAVE_LCHFLAGS",
  #endif
  
  #ifdef HAVE_LCHMOD
!     "HAVE_LCHMOD",
  #endif
  
  #ifdef HAVE_LCHOWN
!     "HAVE_LCHOWN",
  #endif
  
  #ifdef HAVE_LSTAT
!     "HAVE_LSTAT",
  #endif
  
  #ifdef HAVE_LUTIMES
!     "HAVE_LUTIMES",
  #endif
  
  #ifdef HAVE_MKDIRAT
!     "HAVE_MKDIRAT",
  #endif
  
  #ifdef HAVE_MKFIFOAT
!     "HAVE_MKFIFOAT",
  #endif
  
  #ifdef HAVE_MKNODAT
!     "HAVE_MKNODAT",
  #endif
  
  #ifdef HAVE_OPENAT
!     "HAVE_OPENAT",
  #endif
  
  #ifdef HAVE_READLINKAT
!     "HAVE_READLINKAT",
  #endif
  
  #ifdef HAVE_RENAMEAT
!     "HAVE_RENAMEAT",
  #endif
  
  #ifdef HAVE_SYMLINKAT
!     "HAVE_SYMLINKAT",
  #endif
  
  #ifdef HAVE_UNLINKAT
!     "HAVE_UNLINKAT",
  #endif
  
  #ifdef HAVE_UTIMENSAT
!     "HAVE_UTIMENSAT",
  #endif
  
  #ifdef MS_WINDOWS
!     "MS_WINDOWS",
  #endif
  
!     NULL
  };
  
  
--- 12883,13027 ----
  
  
  static struct PyModuleDef posixmodule = {
!         PyModuleDef_HEAD_INIT,
!         MODNAME,
!         posix__doc__,
!         -1,
!         posix_methods,
!         NULL,
!         NULL,
!         NULL,
!         NULL
  };
  
  
  static const char * const have_functions[] = {
  
  #ifdef HAVE_FACCESSAT
!         "HAVE_FACCESSAT",
  #endif
  
  #ifdef HAVE_FCHDIR
!         "HAVE_FCHDIR",
  #endif
  
  #ifdef HAVE_FCHMOD
!         "HAVE_FCHMOD",
  #endif
  
  #ifdef HAVE_FCHMODAT
!         "HAVE_FCHMODAT",
  #endif
  
  #ifdef HAVE_FCHOWN
!         "HAVE_FCHOWN",
  #endif
  
  #ifdef HAVE_FCHOWNAT
!         "HAVE_FCHOWNAT",
  #endif
  
  #ifdef HAVE_FEXECVE
!         "HAVE_FEXECVE",
  #endif
  
  #ifdef HAVE_FDOPENDIR
!         "HAVE_FDOPENDIR",
  #endif
  
  #ifdef HAVE_FPATHCONF
!         "HAVE_FPATHCONF",
  #endif
  
  #ifdef HAVE_FSTATAT
!         "HAVE_FSTATAT",
  #endif
  
  #ifdef HAVE_FSTATVFS
!         "HAVE_FSTATVFS",
  #endif
  
  #if defined HAVE_FTRUNCATE || defined MS_WINDOWS
!         "HAVE_FTRUNCATE",
  #endif
  
  #ifdef HAVE_FUTIMENS
!         "HAVE_FUTIMENS",
  #endif
  
  #ifdef HAVE_FUTIMES
!         "HAVE_FUTIMES",
  #endif
  
  #ifdef HAVE_FUTIMESAT
!         "HAVE_FUTIMESAT",
  #endif
  
  #ifdef HAVE_LINKAT
!         "HAVE_LINKAT",
  #endif
  
  #ifdef HAVE_LCHFLAGS
!         "HAVE_LCHFLAGS",
  #endif
  
  #ifdef HAVE_LCHMOD
!         "HAVE_LCHMOD",
  #endif
  
  #ifdef HAVE_LCHOWN
!         "HAVE_LCHOWN",
  #endif
  
  #ifdef HAVE_LSTAT
!         "HAVE_LSTAT",
  #endif
  
  #ifdef HAVE_LUTIMES
!         "HAVE_LUTIMES",
  #endif
  
  #ifdef HAVE_MKDIRAT
!         "HAVE_MKDIRAT",
  #endif
  
  #ifdef HAVE_MKFIFOAT
!         "HAVE_MKFIFOAT",
  #endif
  
  #ifdef HAVE_MKNODAT
!         "HAVE_MKNODAT",
  #endif
  
  #ifdef HAVE_OPENAT
!         "HAVE_OPENAT",
  #endif
  
  #ifdef HAVE_READLINKAT
!         "HAVE_READLINKAT",
  #endif
  
  #ifdef HAVE_RENAMEAT
!         "HAVE_RENAMEAT",
  #endif
  
  #ifdef HAVE_SYMLINKAT
!         "HAVE_SYMLINKAT",
  #endif
  
  #ifdef HAVE_UNLINKAT
!         "HAVE_UNLINKAT",
  #endif
  
  #ifdef HAVE_UTIMENSAT
!         "HAVE_UTIMENSAT",
  #endif
  
  #ifdef MS_WINDOWS
!         "MS_WINDOWS",
  #endif
  
!         NULL
  };
  
  
***************
*** 13090,13096 ****
                                         &statvfs_result_desc) < 0)
              return NULL;
  #ifdef NEED_TICKS_PER_SECOND
! #  if defined(HAVE_SYSCONF) && defined(_SC_CLK_TCK)
          ticks_per_second = sysconf(_SC_CLK_TCK);
  #  elif defined(HZ)
          ticks_per_second = HZ;
--- 13082,13088 ----
                                         &statvfs_result_desc) < 0)
              return NULL;
  #ifdef NEED_TICKS_PER_SECOND
!         #  if defined(HAVE_SYSCONF) && defined(_SC_CLK_TCK)
          ticks_per_second = sysconf(_SC_CLK_TCK);
  #  elif defined(HZ)
          ticks_per_second = HZ;
***************
*** 13189,13200 ****
  
      /* suppress "function not used" warnings */
      {
!     int ignored;
!     fd_specified("", -1);
!     follow_symlinks_specified("", 1);
!     dir_fd_and_follow_symlinks_invalid("chmod", DEFAULT_DIR_FD, 1);
!     dir_fd_converter(Py_None, &ignored);
!     dir_fd_unavailable(Py_None, &ignored);
      }
  
      /*
--- 13181,13192 ----
  
      /* suppress "function not used" warnings */
      {
!         int ignored;
!         fd_specified("", -1);
!         follow_symlinks_specified("", 1);
!         dir_fd_and_follow_symlinks_invalid("chmod", DEFAULT_DIR_FD, 1);
!         dir_fd_converter(Py_None, &ignored);
!         dir_fd_unavailable(Py_None, &ignored);
      }
  
      /*
