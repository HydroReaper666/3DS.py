--- interpreter/Python-3.6.8/Python/condvar.h	2018-12-23 22:37:14.000000000 +0100
+++ python_patches/condvar.h	2019-05-25 20:47:58.217332113 +0200
@@ -109,6 +109,69 @@
         return 0;
 }
 
+#elif defined(_3DS)
+
+#define Py_HAVE_CONDVAR
+
+#include "condvars_ctr.h"
+
+/* The following functions return 0 on success, nonzero on error. */
+#define PyMUTEX_T LightLock
+
+Py_LOCAL_INLINE(int)
+PyMUTEX_INIT(PyMUTEX_T *mut) {
+    LightLock_Init(mut);
+    return 0;
+}
+
+Py_LOCAL_INLINE(int)
+PyMUTEX_FINI(PyMUTEX_T *mut) {
+    LightLock_Init(mut);
+    return 0;
+}
+
+Py_LOCAL_INLINE(int)
+PyMUTEX_LOCK(PyMUTEX_T *mut) {
+    LightLock_Lock(mut);
+    return 0;
+}
+
+Py_LOCAL_INLINE(int)
+PyMUTEX_UNLOCK(PyMUTEX_T *mut) {
+    LightLock_Unlock(mut);
+    return 0;
+}
+
+#define PyCOND_T CondVar
+
+Py_LOCAL_INLINE(int)
+PyCOND_INIT(PyCOND_T *cond, PyMUTEX_T *mut) {
+    CondVar_Init(cond, mut);
+    return 0;
+}
+
+
+#define PyCOND_FINI(cond)       0
+#define PyCOND_SIGNAL(cond)     CondVar_NotifyOne((cond))
+#define PyCOND_BROADCAST(cond)  CondVar_NotifyAll((cond))
+#define PyCOND_WAIT(cond, mut)  CondVar_Wait((cond), (mut))
+
+/* Return 0 for success, 1 on timeout, -1 on error. */
+Py_LOCAL_INLINE(int)
+PyCOND_TIMEDWAIT(PyCOND_T *cond, PyMUTEX_T *mut, PY_LONG_LONG us)
+{
+    bool r;
+    u64 ns = us * 1000; // microseconds to nanoseconds
+
+    r = CondVar_WaitTimeout((cond), (mut), ns);
+    if (r == 1)
+        return 0;
+    else if (!r) // timeout
+        return 0;
+    else
+        return -1;
+}
+
 #elif defined(NT_THREADS)
 /*
  * Windows (XP, 2003 server and later, as well as (hopefully) CE) support
